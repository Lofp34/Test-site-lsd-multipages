/**
 * Cron job pour la maintenance automatique des pages temporaires
 * 
 * Cette API est appel√©e p√©riodiquement pour :
 * - Nettoyer les pages temporaires obsol√®tes
 * - Mettre √† jour le sitemap
 * - D√©tecter de nouvelles ressources manquantes
 */

import { NextRequest, NextResponse } from 'next/server';
import { autoDetector, defaultDetectionConfig } from '@/lib/temporary-pages/auto-detector';
import { sitemapIntegration } from '@/lib/temporary-pages/sitemap-integration';
import { temporaryPageGenerator } from '@/lib/temporary-pages/generator';

/**
 * GET - Maintenance automatique des pages temporaires
 */
export async function GET(request: NextRequest) {
  const startTime = Date.now();
  
  try {
    console.log('üîß D√©but de la maintenance automatique des pages temporaires');
    
    const results = {
      timestamp: new Date().toISOString(),
      cleanup: { removed: 0, errors: [] as string[] },
      detection: { 
        totalLinks: 0, 
        brokenLinks: 0, 
        temporaryPagesCreated: 0, 
        errors: [] as string[] 
      },
      sitemap: { updated: false, errors: [] as string[] },
      stats: {
        totalPages: 0,
        byType: {} as Record<string, number>,
        byPriority: {} as Record<string, number>,
        byStatus: {} as Record<string, number>
      },
      executionTime: 0
    };
    
    // 1. Nettoyer les pages temporaires obsol√®tes
    console.log('üßπ Nettoyage des pages obsol√®tes...');
    try {
      results.cleanup = await autoDetector.cleanupObsoletePages();
      console.log(`‚úÖ Nettoyage termin√©: ${results.cleanup.removed} pages supprim√©es`);
    } catch (error) {
      const errorMsg = `Erreur lors du nettoyage: ${error}`;
      results.cleanup.errors.push(errorMsg);
      console.error(errorMsg);
    }
    
    // 2. D√©tecter de nouvelles ressources manquantes (mode l√©ger)
    console.log('üîç D√©tection de nouvelles ressources manquantes...');
    try {
      const detectionConfig = {
        ...defaultDetectionConfig,
        maxDepth: 2, // R√©duire la profondeur pour les t√¢ches cron
        timeout: 5000, // Timeout plus court
        retryAttempts: 1
      };
      
      // Note: En production, cette d√©tection devrait √™tre limit√©e ou d√©sactiv√©e
      // pour √©viter une charge excessive sur le serveur
      const shouldRunDetection = process.env.ENABLE_AUTO_DETECTION === 'true';
      
      if (shouldRunDetection) {
        results.detection = await autoDetector.detectAndCreateTemporaryPages(detectionConfig);
        console.log(`‚úÖ D√©tection termin√©e: ${results.detection.temporaryPagesCreated} nouvelles pages cr√©√©es`);
      } else {
        console.log('‚ö†Ô∏è  D√©tection automatique d√©sactiv√©e (ENABLE_AUTO_DETECTION=false)');
      }
    } catch (error) {
      const errorMsg = `Erreur lors de la d√©tection: ${error}`;
      results.detection.errors.push(errorMsg);
      console.error(errorMsg);
    }
    
    // 3. Mettre √† jour le sitemap
    console.log('üó∫Ô∏è  Mise √† jour du sitemap...');
    try {
      await sitemapIntegration.updateSitemapWithTemporaryPages();
      results.sitemap.updated = true;
      console.log('‚úÖ Sitemap mis √† jour');
    } catch (error) {
      const errorMsg = `Erreur lors de la mise √† jour du sitemap: ${error}`;
      results.sitemap.errors.push(errorMsg);
      console.error(errorMsg);
    }
    
    // 4. Collecter les statistiques finales
    console.log('üìä Collecte des statistiques...');
    try {
      results.stats = await temporaryPageGenerator.getStats();
      console.log(`üìà Statistiques: ${results.stats.totalPages} pages temporaires actives`);
    } catch (error) {
      console.error('Erreur lors de la collecte des statistiques:', error);
    }
    
    // Calculer le temps d'ex√©cution
    results.executionTime = Date.now() - startTime;
    
    console.log(`üéâ Maintenance termin√©e en ${results.executionTime}ms`);
    
    return NextResponse.json({
      success: true,
      message: 'Maintenance automatique termin√©e avec succ√®s',
      results
    });
    
  } catch (error) {
    const executionTime = Date.now() - startTime;
    console.error('‚ùå Erreur lors de la maintenance automatique:', error);
    
    return NextResponse.json({
      success: false,
      error: 'Erreur lors de la maintenance automatique',
      details: error instanceof Error ? error.message : String(error),
      executionTime
    }, { status: 500 });
  }
}

/**
 * POST - Maintenance manuelle avec options personnalis√©es
 */
export async function POST(request: NextRequest) {
  const startTime = Date.now();
  
  try {
    const body = await request.json();
    const {
      runCleanup = true,
      runDetection = false,
      updateSitemap = true,
      detectionConfig = {}
    } = body;
    
    console.log('üîß D√©but de la maintenance manuelle des pages temporaires');
    
    const results = {
      timestamp: new Date().toISOString(),
      cleanup: { removed: 0, errors: [] as string[] },
      detection: { 
        totalLinks: 0, 
        brokenLinks: 0, 
        temporaryPagesCreated: 0, 
        errors: [] as string[] 
      },
      sitemap: { updated: false, errors: [] as string[] },
      stats: {
        totalPages: 0,
        byType: {} as Record<string, number>,
        byPriority: {} as Record<string, number>,
        byStatus: {} as Record<string, number>
      },
      executionTime: 0
    };
    
    // Nettoyage
    if (runCleanup) {
      console.log('üßπ Nettoyage des pages obsol√®tes...');
      try {
        results.cleanup = await autoDetector.cleanupObsoletePages();
        console.log(`‚úÖ Nettoyage termin√©: ${results.cleanup.removed} pages supprim√©es`);
      } catch (error) {
        const errorMsg = `Erreur lors du nettoyage: ${error}`;
        results.cleanup.errors.push(errorMsg);
        console.error(errorMsg);
      }
    }
    
    // D√©tection
    if (runDetection) {
      console.log('üîç D√©tection de nouvelles ressources manquantes...');
      try {
        const config = {
          ...defaultDetectionConfig,
          ...detectionConfig
        };
        
        results.detection = await autoDetector.detectAndCreateTemporaryPages(config);
        console.log(`‚úÖ D√©tection termin√©e: ${results.detection.temporaryPagesCreated} nouvelles pages cr√©√©es`);
      } catch (error) {
        const errorMsg = `Erreur lors de la d√©tection: ${error}`;
        results.detection.errors.push(errorMsg);
        console.error(errorMsg);
      }
    }
    
    // Sitemap
    if (updateSitemap) {
      console.log('üó∫Ô∏è  Mise √† jour du sitemap...');
      try {
        await sitemapIntegration.updateSitemapWithTemporaryPages();
        results.sitemap.updated = true;
        console.log('‚úÖ Sitemap mis √† jour');
      } catch (error) {
        const errorMsg = `Erreur lors de la mise √† jour du sitemap: ${error}`;
        results.sitemap.errors.push(errorMsg);
        console.error(errorMsg);
      }
    }
    
    // Statistiques
    try {
      results.stats = await temporaryPageGenerator.getStats();
    } catch (error) {
      console.error('Erreur lors de la collecte des statistiques:', error);
    }
    
    results.executionTime = Date.now() - startTime;
    
    console.log(`üéâ Maintenance manuelle termin√©e en ${results.executionTime}ms`);
    
    return NextResponse.json({
      success: true,
      message: 'Maintenance manuelle termin√©e avec succ√®s',
      results
    });
    
  } catch (error) {
    const executionTime = Date.now() - startTime;
    console.error('‚ùå Erreur lors de la maintenance manuelle:', error);
    
    return NextResponse.json({
      success: false,
      error: 'Erreur lors de la maintenance manuelle',
      details: error instanceof Error ? error.message : String(error),
      executionTime
    }, { status: 500 });
  }
}