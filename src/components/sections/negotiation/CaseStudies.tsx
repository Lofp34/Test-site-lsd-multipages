'use client';

import React, { useState } from 'react';
import { NegotiationTechnique } from '@/types/negotiation-technique';
import AnimatedSection from '@/components/ui/AnimatedSection';
import Badge from '@/components/ui/Badge';
import Button from '@/components/ui/Button';

interface CaseStudiesProps {
  cases: {
    industry: string;
    challenge: string;
    application: string;
    results: string;
    metrics: {
      [key: string]: string;
    };
  }[];
  technique: NegotiationTechnique;
}

interface CaseStudyCardProps {
  caseStudy: {
    industry: string;
    challenge: string;
    application: string;
    results: string;
    metrics: {
      [key: string]: string;
    };
  };
  index: number;
  isExpanded: boolean;
  onToggle: () => void;
}

interface MetricsVisualizationProps {
  metrics: {
    [key: string]: string;
  };
  industry: string;
}

interface FilterButtonsProps {
  industries: string[];
  selectedIndustry: string | null;
  onFilterChange: (industry: string | null) => void;
}

interface LaurentFeedbackProps {
  technique: NegotiationTechnique;
  totalCases: number;
}

// Composant Visualisation des m√©triques
const MetricsVisualization: React.FC<MetricsVisualizationProps> = ({ metrics, industry }) => {
  const metricEntries = Object.entries(metrics);
  
  return (
    <div className="mt-6 p-4 bg-gradient-to-r from-mint-green/10 to-blue-ink/10 rounded-xl border border-mint-green/20">
      <h5 className="font-bold text-blue-ink dark:text-white mb-4 flex items-center gap-2">
        <span className="text-mint-green">üìä</span>
        M√©triques de r√©sultats
      </h5>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {metricEntries.map(([key, value], index) => (
          <div key={index} className="bg-white/70 dark:bg-blue-ink/40 rounded-lg p-3 border border-gray-200 dark:border-gray-700">
            <div className="flex items-center justify-between">
              <span className="text-gray-600 dark:text-gray-400 text-sm font-medium">
                {key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}
              </span>
              <span className="text-mint-green font-bold text-lg">
                {value}
              </span>
            </div>
            
            {/* Barre de progression visuelle pour certaines m√©triques */}
            {(value.includes('%') || value.includes('‚Ç¨')) && (
              <div className="mt-2">
                <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2">
                  <div 
                    className="bg-gradient-to-r from-mint-green to-blue-ink h-2 rounded-full transition-all duration-1000"
                    style={{ 
                      width: value.includes('%') 
                        ? value.replace('%', '') + '%' 
                        : '75%' // Default for non-percentage values
                    }}
                  ></div>
                </div>
              </div>
            )}
          </div>
        ))}
      </div>
    </div>
  );
};

// Composant Carte d'√©tude de cas
const CaseStudyCard: React.FC<CaseStudyCardProps> = ({ caseStudy, index, isExpanded, onToggle }) => {
  const industryIcon = getIndustryIcon(caseStudy.industry);
  const industryColor = getIndustryColor(caseStudy.industry);

  const handleToggle = () => {
    onToggle();
    
    // Track case study interaction
    if (typeof window !== 'undefined' && window.gtag) {
      window.gtag('event', 'case_study_interaction', {
        event_category: 'Case Studies',
        event_label: caseStudy.industry,
        action: isExpanded ? 'collapse' : 'expand'
      });
    }
  };

  return (
    <AnimatedSection delay={100 + index * 100} animation="slide-up">
      <div className="bg-white/80 dark:bg-blue-ink/60 rounded-2xl border border-gray-200 dark:border-gray-700 shadow-lg hover:shadow-xl transition-all duration-300 overflow-hidden">
        {/* En-t√™te de la carte */}
        <div className="p-6 border-b border-gray-200 dark:border-gray-700">
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center gap-3">
              <div 
                className="w-12 h-12 rounded-xl flex items-center justify-center text-2xl"
                style={{ backgroundColor: `${industryColor}20` }}
              >
                {industryIcon}
              </div>
              <div>
                <h4 className="font-bold text-blue-ink dark:text-white text-lg">
                  {caseStudy.industry}
                </h4>
                <Badge 
                  variant="outline" 
                  size="sm" 
                  className="border-mint-green/30 text-mint-green"
                >
                  Cas client #{index + 1}
                </Badge>
              </div>
            </div>
            
            <Button
              variant="ghost"
              size="sm"
              onClick={handleToggle}
              className="text-mint-green hover:bg-mint-green/10"
              icon={
                <span className={`transform transition-transform duration-300 ${isExpanded ? 'rotate-180' : ''}`}>
                  ‚Üì
                </span>
              }
            >
              {isExpanded ? 'R√©duire' : 'D√©tails'}
            </Button>
          </div>
          
          {/* Challenge */}
          <div className="mb-4">
            <h5 className="font-semibold text-blue-ink dark:text-white mb-2 flex items-center gap-2">
              <span className="text-orange-500">‚ö°</span>
              D√©fi initial
            </h5>
            <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
              {caseStudy.challenge}
            </p>
          </div>
        </div>

        {/* Contenu extensible */}
        <div className={`overflow-hidden transition-all duration-500 ${isExpanded ? 'max-h-96 opacity-100' : 'max-h-0 opacity-0'}`}>
          <div className="p-6 space-y-6">
            {/* Application de la technique */}
            <div>
              <h5 className="font-semibold text-blue-ink dark:text-white mb-3 flex items-center gap-2">
                <span className="text-blue-500">üéØ</span>
                Application de la technique
              </h5>
              <div className="bg-blue-ink/10 dark:bg-blue-ink/20 rounded-lg p-4 border-l-4 border-blue-ink">
                <p className="text-gray-700 dark:text-gray-300 leading-relaxed italic">
                  {caseStudy.application}
                </p>
              </div>
            </div>

            {/* R√©sultats */}
            <div>
              <h5 className="font-semibold text-blue-ink dark:text-white mb-3 flex items-center gap-2">
                <span className="text-green-500">‚úÖ</span>
                R√©sultats obtenus
              </h5>
              <div className="bg-mint-green/10 dark:bg-mint-green/20 rounded-lg p-4 border-l-4 border-mint-green">
                <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
                  {caseStudy.results}
                </p>
              </div>
            </div>

            {/* M√©triques */}
            <MetricsVisualization 
              metrics={caseStudy.metrics} 
              industry={caseStudy.industry}
            />
          </div>
        </div>
      </div>
    </AnimatedSection>
  );
};

// Composant Boutons de filtre
const FilterButtons: React.FC<FilterButtonsProps> = ({ industries, selectedIndustry, onFilterChange }) => {
  return (
    <div className="flex flex-wrap items-center justify-center gap-3 mb-8">
      <Button
        variant={selectedIndustry === null ? 'primary' : 'ghost'}
        size="sm"
        onClick={() => onFilterChange(null)}
        className="text-sm"
      >
        Tous les secteurs
      </Button>
      
      {industries.map((industry) => (
        <Button
          key={industry}
          variant={selectedIndustry === industry ? 'primary' : 'ghost'}
          size="sm"
          onClick={() => onFilterChange(industry)}
          className="text-sm"
          icon={<span>{getIndustryIcon(industry)}</span>}
        >
          {industry.split(' - ')[0]}
        </Button>
      ))}
    </div>
  );
};

// Composant Retour d'exp√©rience Laurent Serre
const LaurentFeedback: React.FC<LaurentFeedbackProps> = ({ technique, totalCases }) => {
  // Generate contextual feedback based on technique
  const getFeedbackText = () => {
    const baseText = `En ${totalCases > 15 ? '20' : '15'} ans d'accompagnement PME, j'ai pu mesurer l'efficacit√© de ${technique.title} sur des centaines de n√©gociations. `;
    
    switch (technique.category) {
      case 'psychology':
        return baseText + `Cette technique psychologique demande de la subtilit√© en contexte PME fran√ßais, o√π la relation personnelle prime. Les r√©sultats sont spectaculaires quand elle est bien appliqu√©e : les clients r√©v√®lent leurs vraies pr√©occupations et la n√©gociation devient collaborative.`;
      
      case 'closing':
        return baseText + `Cette technique de closing est particuli√®rement efficace avec les dirigeants PME qui appr√©cient la franchise et la clart√©. Elle permet de conclure sans pression excessive, en respectant le processus d√©cisionnel sp√©cifique aux petites structures.`;
      
      case 'preparation':
        return baseText + `La pr√©paration est cruciale en PME o√π chaque n√©gociation compte. Cette approche m√©thodique permet d'arriver confiant et structur√©, ce qui rassure les dirigeants et augmente significativement les chances de succ√®s.`;
      
      case 'objection-handling':
        return baseText + `Les objections en PME sont souvent li√©es aux contraintes sp√©cifiques des petites structures. Cette technique permet de transformer ces objections en opportunit√©s de mieux comprendre le contexte client et d'adapter sa proposition.`;
      
      default:
        return baseText + `Cette technique s'adapte parfaitement au contexte PME fran√ßais, o√π l'approche relationnelle et la compr√©hension des enjeux sp√©cifiques sont essentielles pour r√©ussir ses n√©gociations.`;
    }
  };

  const getSuccessMetrics = () => {
    const baseMetrics = technique.successMetrics || [];
    return [
      { label: 'Taux de r√©ussite moyen', value: baseMetrics[0]?.value || '78%' },
      { label: 'PME accompagn√©es', value: `${totalCases * 15}+` },
      { label: 'Am√©lioration mesur√©e', value: baseMetrics[1]?.value || '65%' }
    ];
  };

  return (
    <AnimatedSection animation="fade-in" delay={400}>
      <div className="mt-12 bg-gradient-to-r from-blue-ink/10 to-mint-green/10 rounded-2xl p-8 border border-blue-ink/20 backdrop-blur-sm">
        <div className="flex items-center gap-4 mb-6">
          <div className="w-16 h-16 bg-gradient-to-br from-blue-ink to-mint-green rounded-2xl flex items-center justify-center shadow-xl">
            <span className="text-white font-bold text-xl">LS</span>
          </div>
          <div>
            <h3 className="text-2xl font-bold text-blue-ink dark:text-white mb-1">
              Retour d'exp√©rience Laurent Serre
            </h3>
            <p className="text-gray-600 dark:text-gray-400">
              Expert d√©veloppement commercial PME ‚Ä¢ {technique.title}
            </p>
          </div>
        </div>
        
        <blockquote className="relative mb-6">
          <div className="absolute -top-2 -left-2 text-4xl text-mint-green/30 font-serif">"</div>
          <p className="text-gray-700 dark:text-gray-300 leading-relaxed text-lg italic pl-6 pr-6">
            {getFeedbackText()}
          </p>
          <div className="absolute -bottom-2 -right-2 text-4xl text-mint-green/30 font-serif">"</div>
        </blockquote>
        
        <div className="grid md:grid-cols-3 gap-6 mt-8 pt-6 border-t border-gray-200 dark:border-gray-700">
          {getSuccessMetrics().map((metric, index) => (
            <div key={index} className="text-center">
              <div className="text-3xl font-bold text-mint-green mb-2">
                {metric.value}
              </div>
              <div className="text-gray-600 dark:text-gray-400 text-sm">
                {metric.label}
              </div>
            </div>
          ))}
        </div>
      </div>
    </AnimatedSection>
  );
};

// Fonctions utilitaires
function getIndustryIcon(industry: string): string {
  const industryLower = industry.toLowerCase();
  
  if (industryLower.includes('tech') || industryLower.includes('digital') || industryLower.includes('startup')) return 'üíª';
  if (industryLower.includes('service') || industryLower.includes('conseil')) return 'üè¢';
  if (industryLower.includes('industrie') || industryLower.includes('fabricant') || industryLower.includes('m√©tallurgie')) return 'üè≠';
  if (industryLower.includes('commerce') || industryLower.includes('retail')) return 'üõçÔ∏è';
  if (industryLower.includes('sant√©') || industryLower.includes('m√©dical')) return 'üè•';
  if (industryLower.includes('finance') || industryLower.includes('banque')) return 'üè¶';
  if (industryLower.includes('construction') || industryLower.includes('btp')) return 'üèóÔ∏è';
  if (industryLower.includes('transport') || industryLower.includes('logistique')) return 'üöõ';
  
  return 'üè¢'; // Default
}

function getIndustryColor(industry: string): string {
  const industryLower = industry.toLowerCase();
  
  if (industryLower.includes('tech') || industryLower.includes('digital')) return '#3B82F6';
  if (industryLower.includes('service') || industryLower.includes('conseil')) return '#10B981';
  if (industryLower.includes('industrie') || industryLower.includes('fabricant')) return '#F59E0B';
  if (industryLower.includes('commerce')) return '#EF4444';
  if (industryLower.includes('sant√©')) return '#8B5CF6';
  if (industryLower.includes('finance')) return '#06B6D4';
  
  return '#6B7280'; // Default gray
}

// Composant principal CaseStudies
const CaseStudies: React.FC<CaseStudiesProps> = ({ cases, technique }) => {
  const [selectedIndustry, setSelectedIndustry] = useState<string | null>(null);
  const [expandedCase, setExpandedCase] = useState<number | null>(null);

  // Extract unique industries for filtering
  const industries = Array.from(new Set(cases.map(c => c.industry)));
  
  // Filter cases based on selected industry
  const filteredCases = selectedIndustry 
    ? cases.filter(c => c.industry === selectedIndustry)
    : cases;

  const handleCaseToggle = (index: number) => {
    setExpandedCase(expandedCase === index ? null : index);
  };

  return (
    <section className="py-16 bg-gradient-to-b from-primary-bg to-white/50 dark:from-blue-ink/20 dark:to-blue-ink/40">
      <div className="max-w-6xl mx-auto px-4">
        {/* En-t√™te de section */}
        <AnimatedSection animation="fade-in" delay={0}>
          <div className="text-center mb-12">
            <Badge variant="default" size="md" className="mb-4">
              <span className="mr-2">üè¢</span>
              Cas Clients PME
            </Badge>
            <h2 className="text-3xl md:text-4xl font-bold text-blue-ink dark:text-white mb-4">
              {technique.title} en action
            </h2>
            <p className="text-gray-600 dark:text-gray-400 max-w-3xl mx-auto leading-relaxed">
              D√©couvrez comment mes clients PME appliquent concr√®tement {technique.title} 
              avec des r√©sultats mesur√©s et des m√©triques de performance d√©taill√©es.
            </p>
          </div>
        </AnimatedSection>

        {/* Filtres par industrie */}
        {industries.length > 1 && (
          <AnimatedSection animation="slide-up" delay={100}>
            <FilterButtons
              industries={industries}
              selectedIndustry={selectedIndustry}
              onFilterChange={setSelectedIndustry}
            />
          </AnimatedSection>
        )}

        {/* Grille des cas d'√©tude */}
        <div className="grid gap-6 mb-12">
          {filteredCases.map((caseStudy, index) => (
            <CaseStudyCard
              key={index}
              caseStudy={caseStudy}
              index={index}
              isExpanded={expandedCase === index}
              onToggle={() => handleCaseToggle(index)}
            />
          ))}
        </div>

        {/* Message si aucun cas trouv√© */}
        {filteredCases.length === 0 && (
          <AnimatedSection animation="fade-in" delay={200}>
            <div className="text-center py-12">
              <div className="text-6xl mb-4">üîç</div>
              <h3 className="text-xl font-bold text-blue-ink dark:text-white mb-2">
                Aucun cas trouv√©
              </h3>
              <p className="text-gray-600 dark:text-gray-400">
                Aucun cas client ne correspond au secteur s√©lectionn√©.
              </p>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setSelectedIndustry(null)}
                className="mt-4"
              >
                Voir tous les cas
              </Button>
            </div>
          </AnimatedSection>
        )}

        {/* Retour d'exp√©rience Laurent Serre */}
        <LaurentFeedback 
          technique={technique}
          totalCases={cases.length}
        />

        {/* CTA vers plus de cas ou formation */}
        <AnimatedSection animation="slide-up" delay={500}>
          <div className="text-center mt-12">
            <div className="bg-gradient-to-r from-mint-green/10 to-blue-ink/10 rounded-2xl p-8 border border-mint-green/20">
              <h3 className="text-xl font-bold text-blue-ink dark:text-white mb-4">
                Vous voulez des r√©sultats similaires ?
              </h3>
              <p className="text-gray-700 dark:text-gray-300 mb-6 max-w-2xl mx-auto">
                Ces cas clients montrent l'efficacit√© de {technique.title} en contexte PME. 
                D√©couvrez comment appliquer cette technique dans votre entreprise.
              </p>
              
              <div className="flex flex-col sm:flex-row items-center justify-center gap-4">
                <Button
                  variant="primary"
                  size="lg"
                  icon={<span>üéØ</span>}
                >
                  Diagnostic gratuit
                </Button>
                
                <Button
                  variant="outline"
                  size="lg"
                  icon={<span>üìö</span>}
                >
                  Formation {technique.category === 'closing' ? 'Closing' : 'N√©gociation'}
                </Button>
              </div>
            </div>
          </div>
        </AnimatedSection>
      </div>
    </section>
  );
};

export default CaseStudies;