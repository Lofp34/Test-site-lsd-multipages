name: Validation des Liens avant D√©ploiement

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environnement cible'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production

jobs:
  pre-deploy-audit:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup environment
      run: |
        echo "SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }}" >> $GITHUB_ENV
        echo "SENDGRID_FROM_EMAIL=${{ secrets.SENDGRID_FROM_EMAIL }}" >> $GITHUB_ENV
        echo "SENDGRID_FROM_NAME=${{ secrets.SENDGRID_FROM_NAME }}" >> $GITHUB_ENV
        echo "ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}" >> $GITHUB_ENV
        echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_BASE_URL=${{ secrets.NEXT_PUBLIC_BASE_URL }}" >> $GITHUB_ENV
        
    - name: Build application
      run: npm run build
      
    - name: Run comprehensive pre-deploy audit
      run: |
        mkdir -p deploy-reports
        
        # Audit complet avant d√©ploiement
        npm run audit:cli audit \
          --depth 4 \
          --external \
          --format all \
          --output ./deploy-reports \
          --timeout 60000 \
          --batch-size 8
      continue-on-error: true
      
    - name: Validate critical paths
      run: |
        # V√©rifier les chemins critiques du site
        CRITICAL_PATHS=(
          "/"
          "/a-propos"
          "/services"
          "/contact"
          "/ressources"
          "/blog"
        )
        
        echo "üîç Validation des chemins critiques..."
        
        for path in "${CRITICAL_PATHS[@]}"; do
          echo "V√©rification: $path"
          # TODO: Ajouter validation sp√©cifique des chemins critiques
        done
        
    - name: Check deployment readiness
      id: deploy-check
      run: |
        if [ -f "deploy-reports/audit-report-*.json" ]; then
          REPORT_FILE=$(ls deploy-reports/audit-report-*.json | head -1)
          
          BROKEN_LINKS=$(jq '.summary.brokenLinks' "$REPORT_FILE")
          HEALTH_SCORE=$(jq '.summary.seoHealthScore' "$REPORT_FILE")
          CRITICAL_ISSUES=$(jq '.seoImpact.criticalIssues' "$REPORT_FILE")
          
          echo "broken_links=$BROKEN_LINKS" >> $GITHUB_OUTPUT
          echo "health_score=$HEALTH_SCORE" >> $GITHUB_OUTPUT
          echo "critical_issues=$CRITICAL_ISSUES" >> $GITHUB_OUTPUT
          
          # D√©terminer si le d√©ploiement peut continuer
          if [ "$CRITICAL_ISSUES" -eq 0 ] && [ "$HEALTH_SCORE" -ge 90 ]; then
            echo "deploy_ready=true" >> $GITHUB_OUTPUT
            echo "deploy_status=‚úÖ Pr√™t pour le d√©ploiement" >> $GITHUB_OUTPUT
          elif [ "$CRITICAL_ISSUES" -le 2 ] && [ "$HEALTH_SCORE" -ge 80 ]; then
            echo "deploy_ready=warning" >> $GITHUB_OUTPUT
            echo "deploy_status=‚ö†Ô∏è D√©ploiement possible avec surveillance" >> $GITHUB_OUTPUT
          else
            echo "deploy_ready=false" >> $GITHUB_OUTPUT
            echo "deploy_status=‚ùå D√©ploiement non recommand√©" >> $GITHUB_OUTPUT
          fi
        else
          echo "deploy_ready=error" >> $GITHUB_OUTPUT
          echo "deploy_status=üîß Erreur d'audit" >> $GITHUB_OUTPUT
        fi
        
    - name: Upload deployment audit
      uses: actions/upload-artifact@v4
      with:
        name: deployment-audit-${{ github.sha }}
        path: deploy-reports/
        retention-days: 30
        
    - name: Create deployment summary
      run: |
        cat > deployment-summary.md << EOF
        # üöÄ R√©sum√© de Validation de D√©ploiement
        
        **Commit:** \`${{ github.sha }}\`
        **Branche:** \`${{ github.ref_name }}\`
        **Environnement:** ${{ github.event.inputs.environment || 'production' }}
        **Date:** $(date '+%d/%m/%Y %H:%M:%S')
        
        ## Statut de Validation
        
        ${{ steps.deploy-check.outputs.deploy_status }}
        
        ### M√©triques
        - **Liens morts:** ${{ steps.deploy-check.outputs.broken_links }}
        - **Score de sant√©:** ${{ steps.deploy-check.outputs.health_score }}%
        - **Probl√®mes critiques:** ${{ steps.deploy-check.outputs.critical_issues }}
        
        ### Recommandations
        
        EOF
        
        if [ "${{ steps.deploy-check.outputs.deploy_ready }}" = "true" ]; then
          echo "‚úÖ **D√©ploiement approuv√©** - Tous les crit√®res sont respect√©s." >> deployment-summary.md
        elif [ "${{ steps.deploy-check.outputs.deploy_ready }}" = "warning" ]; then
          echo "‚ö†Ô∏è **D√©ploiement avec surveillance** - Quelques probl√®mes mineurs d√©tect√©s." >> deployment-summary.md
          echo "" >> deployment-summary.md
          echo "**Actions post-d√©ploiement recommand√©es:**" >> deployment-summary.md
          echo "- Surveiller les m√©triques de trafic" >> deployment-summary.md
          echo "- Corriger les liens morts restants" >> deployment-summary.md
          echo "- Planifier un audit de suivi sous 24h" >> deployment-summary.md
        else
          echo "‚ùå **D√©ploiement non recommand√©** - Probl√®mes critiques d√©tect√©s." >> deployment-summary.md
          echo "" >> deployment-summary.md
          echo "**Actions requises avant d√©ploiement:**" >> deployment-summary.md
          echo "- Corriger tous les liens morts critiques" >> deployment-summary.md
          echo "- R√©soudre les probl√®mes SEO majeurs" >> deployment-summary.md
          echo "- Re-lancer la validation" >> deployment-summary.md
        fi
        
        echo "" >> deployment-summary.md
        echo "---" >> deployment-summary.md
        echo "*Rapport g√©n√©r√© automatiquement par GitHub Actions*" >> deployment-summary.md
        
    - name: Comment on commit
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('deployment-summary.md', 'utf8');
          
          // Cr√©er un commentaire sur le commit
          await github.rest.repos.createCommitComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: context.sha,
            body: summary
          });
          
    - name: Block deployment if critical issues
      if: steps.deploy-check.outputs.deploy_ready == 'false'
      run: |
        echo "‚ùå D√©ploiement bloqu√© en raison de probl√®mes critiques"
        echo "Liens morts: ${{ steps.deploy-check.outputs.broken_links }}"
        echo "Score de sant√©: ${{ steps.deploy-check.outputs.health_score }}%"
        echo "Probl√®mes critiques: ${{ steps.deploy-check.outputs.critical_issues }}"
        exit 1
        
    - name: Notify deployment team
      if: always()
      run: |
        STATUS="${{ steps.deploy-check.outputs.deploy_ready }}"
        
        if [ "$STATUS" = "false" ]; then
          echo "üö® Notification: D√©ploiement bloqu√© - intervention requise"
          # L'alerte sera envoy√©e automatiquement par le syst√®me SendGrid
        elif [ "$STATUS" = "warning" ]; then
          echo "‚ö†Ô∏è Notification: D√©ploiement avec surveillance recommand√©e"
        else
          echo "‚úÖ Notification: D√©ploiement valid√© et approuv√©"
        fi