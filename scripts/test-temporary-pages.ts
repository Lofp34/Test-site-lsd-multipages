/**
 * Script de test pour le syst√®me de pages temporaires
 * 
 * Ce script teste la cr√©ation, la gestion et la d√©tection automatique
 * des pages temporaires pour ressources manquantes.
 */

import { temporaryPageGenerator, TemporaryPageConfig } from '../src/lib/temporary-pages/generator';
import { autoDetector, defaultDetectionConfig } from '../src/lib/temporary-pages/auto-detector';

/**
 * Tester la cr√©ation manuelle de pages temporaires
 */
async function testManualPageCreation() {
  console.log('\nüß™ Test de cr√©ation manuelle de pages temporaires');
  console.log('=' .repeat(60));
  
  try {
    // Configuration de test
    const testConfigs: TemporaryPageConfig[] = [
      {
        resourceUrl: '/ressources/guide-prospection-avancee.pdf',
        sourceUrl: '/ressources',
        resourceType: 'download',
        title: 'Guide de Prospection Avanc√©e',
        description: 'Guide complet sur les techniques de prospection modernes',
        estimatedDate: 'Mars 2025',
        priority: 'high',
        developmentStatus: 'in_progress',
        progress: 60,
        alternatives: [
          {
            title: 'Guide de base de la prospection',
            url: '/ressources/prospection-base',
            description: 'Version simplifi√©e du guide',
            type: 'internal'
          }
        ]
      },
      {
        resourceUrl: '/outils/calculateur-roi-commercial',
        sourceUrl: '/outils',
        resourceType: 'tool',
        title: 'Calculateur ROI Commercial',
        description: 'Outil pour calculer le retour sur investissement des actions commerciales',
        priority: 'medium',
        developmentStatus: 'planned'
      },
      {
        resourceUrl: '/templates/email-prospection-b2b.docx',
        sourceUrl: '/ressources/templates',
        resourceType: 'template',
        title: 'Templates d\'emails de prospection B2B',
        description: 'Collection de templates d\'emails pour la prospection B2B',
        estimatedDate: 'F√©vrier 2025',
        priority: 'high'
      }
    ];
    
    // Cr√©er les pages temporaires
    for (const config of testConfigs) {
      try {
        console.log(`\nüìÑ Cr√©ation de la page temporaire pour: ${config.resourceUrl}`);
        
        const temporaryUrl = await temporaryPageGenerator.createTemporaryPage(config);
        
        console.log(`‚úÖ Page temporaire cr√©√©e: ${temporaryUrl}`);
        console.log(`   Type: ${config.resourceType}`);
        console.log(`   Priorit√©: ${config.priority}`);
        console.log(`   Statut: ${config.developmentStatus}`);
        
      } catch (error) {
        console.error(`‚ùå Erreur lors de la cr√©ation de ${config.resourceUrl}:`, error);
      }
    }
    
    // Afficher les statistiques
    console.log('\nüìä Statistiques des pages temporaires:');
    const stats = await temporaryPageGenerator.getStats();
    console.log(`   Total: ${stats.total}`);
    console.log(`   Par type:`, stats.byType);
    console.log(`   Par priorit√©:`, stats.byPriority);
    console.log(`   Par statut:`, stats.byStatus);
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test de cr√©ation manuelle:', error);
  }
}

/**
 * Tester la mise √† jour des pages temporaires
 */
async function testPageUpdates() {
  console.log('\nüîÑ Test de mise √† jour des pages temporaires');
  console.log('=' .repeat(60));
  
  try {
    const resourceUrl = '/ressources/guide-prospection-avancee.pdf';
    
    console.log(`\nüìù Mise √† jour de: ${resourceUrl}`);
    
    await temporaryPageGenerator.updateTemporaryPage(resourceUrl, {
      progress: 80,
      developmentStatus: 'review',
      estimatedDate: 'F√©vrier 2025'
    });
    
    console.log('‚úÖ Page temporaire mise √† jour avec succ√®s');
    
    // V√©rifier la mise √† jour
    const pages = await temporaryPageGenerator.getAllTemporaryPages();
    const updatedPage = Object.values(pages).find(page => page.resourceUrl === resourceUrl);
    
    if (updatedPage) {
      console.log(`   Nouveau progr√®s: ${updatedPage.progress}%`);
      console.log(`   Nouveau statut: ${updatedPage.developmentStatus}`);
      console.log(`   Nouvelle date: ${updatedPage.estimatedDate}`);
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test de mise √† jour:', error);
  }
}

/**
 * Tester la d√©tection automatique (simulation)
 */
async function testAutoDetection() {
  console.log('\nüîç Test de d√©tection automatique (simulation)');
  console.log('=' .repeat(60));
  
  try {
    // Configuration de test avec URL locale
    const testConfig = {
      ...defaultDetectionConfig,
      baseUrl: 'http://localhost:3000',
      maxDepth: 2,
      excludePatterns: [
        ...defaultDetectionConfig.excludePatterns,
        '/test/*'
      ]
    };
    
    console.log('üöÄ Lancement de la d√©tection automatique...');
    console.log(`   URL de base: ${testConfig.baseUrl}`);
    console.log(`   Profondeur max: ${testConfig.maxDepth}`);
    console.log(`   Timeout: ${testConfig.timeout}ms`);
    
    // Note: Cette fonction n√©cessite que le serveur soit en cours d'ex√©cution
    // Pour les tests, on simule le r√©sultat
    console.log('‚ö†Ô∏è  Simulation de la d√©tection (serveur requis pour test r√©el)');
    
    const simulatedResult = {
      totalLinks: 150,
      brokenLinks: 5,
      temporaryPagesCreated: 3,
      brokenLinkDetails: [
        {
          url: '/ressources/guide-manquant.pdf',
          sourceFiles: ['src/app/ressources/page.tsx'],
          linkType: 'download',
          error: 'File not found',
          temporaryPageCreated: true,
          temporaryPageUrl: '/temporary-resource?url=%2Fressources%2Fguide-manquant.pdf'
        }
      ],
      errors: []
    };
    
    console.log('\nüìä R√©sultats de la d√©tection (simul√©s):');
    console.log(`   Liens scann√©s: ${simulatedResult.totalLinks}`);
    console.log(`   Liens morts: ${simulatedResult.brokenLinks}`);
    console.log(`   Pages temporaires cr√©√©es: ${simulatedResult.temporaryPagesCreated}`);
    console.log(`   Erreurs: ${simulatedResult.errors.length}`);
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test de d√©tection automatique:', error);
  }
}

/**
 * Tester le nettoyage des pages obsol√®tes
 */
async function testCleanup() {
  console.log('\nüßπ Test de nettoyage des pages obsol√®tes');
  console.log('=' .repeat(60));
  
  try {
    console.log('üöÄ Lancement du nettoyage...');
    
    // Simulation du nettoyage
    console.log('‚ö†Ô∏è  Simulation du nettoyage (validation r√©seau requise pour test r√©el)');
    
    const simulatedCleanup = {
      removed: 1,
      errors: []
    };
    
    console.log('\nüìä R√©sultats du nettoyage (simul√©s):');
    console.log(`   Pages supprim√©es: ${simulatedCleanup.removed}`);
    console.log(`   Erreurs: ${simulatedCleanup.errors.length}`);
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test de nettoyage:', error);
  }
}

/**
 * Tester la suppression de pages temporaires
 */
async function testPageDeletion() {
  console.log('\nüóëÔ∏è  Test de suppression de pages temporaires');
  console.log('=' .repeat(60));
  
  try {
    const resourceUrl = '/outils/calculateur-roi-commercial';
    
    console.log(`\nüóëÔ∏è  Suppression de: ${resourceUrl}`);
    
    await temporaryPageGenerator.removeTemporaryPage(resourceUrl);
    
    console.log('‚úÖ Page temporaire supprim√©e avec succ√®s');
    
    // V√©rifier la suppression
    const pages = await temporaryPageGenerator.getAllTemporaryPages();
    const deletedPage = Object.values(pages).find(page => page.resourceUrl === resourceUrl);
    
    if (!deletedPage) {
      console.log('‚úÖ Confirmation: la page n\'existe plus dans la configuration');
    } else {
      console.log('‚ö†Ô∏è  La page existe encore dans la configuration');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test de suppression:', error);
  }
}

/**
 * Afficher l'√©tat final
 */
async function displayFinalState() {
  console.log('\nüìã √âtat final du syst√®me');
  console.log('=' .repeat(60));
  
  try {
    const pages = await temporaryPageGenerator.getAllTemporaryPages();
    const stats = await temporaryPageGenerator.getStats();
    
    console.log(`\nüìä Statistiques finales:`);
    console.log(`   Total des pages: ${stats.total}`);
    console.log(`   Par type:`, stats.byType);
    console.log(`   Par priorit√©:`, stats.byPriority);
    console.log(`   Par statut:`, stats.byStatus);
    
    console.log(`\nüìÑ Pages temporaires actives:`);
    Object.values(pages).forEach((page, index) => {
      console.log(`   ${index + 1}. ${page.title || page.resourceUrl}`);
      console.log(`      URL: ${page.resourceUrl}`);
      console.log(`      Type: ${page.resourceType} | Priorit√©: ${page.priority}`);
      console.log(`      Statut: ${page.developmentStatus}${page.progress ? ` (${page.progress}%)` : ''}`);
      if (page.estimatedDate) {
        console.log(`      Date pr√©vue: ${page.estimatedDate}`);
      }
      console.log('');
    });
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'affichage de l\'√©tat final:', error);
  }
}

/**
 * Fonction principale de test
 */
async function runTests() {
  console.log('üöÄ D√©marrage des tests du syst√®me de pages temporaires');
  console.log('=' .repeat(80));
  
  try {
    await testManualPageCreation();
    await testPageUpdates();
    await testAutoDetection();
    await testCleanup();
    await testPageDeletion();
    await displayFinalState();
    
    console.log('\nüéâ Tous les tests sont termin√©s !');
    console.log('=' .repeat(80));
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'ex√©cution des tests:', error);
    process.exit(1);
  }
}

// Ex√©cuter les tests si le script est appel√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
  runTests().catch(console.error);
}

export { runTests };