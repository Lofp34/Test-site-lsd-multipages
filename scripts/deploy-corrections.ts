#!/usr/bin/env tsx

/**
 * Script de d√©ploiement et monitoring des corrections de liens cass√©s
 * 
 * Ce script g√®re :
 * - Le d√©ploiement des corrections de liens CTA
 * - La publication des nouvelles pages ressources
 * - La configuration du monitoring des erreurs 404
 * - La mise en place des alertes pour les formulaires
 * - La documentation des changements
 */

import { execSync } from 'child_process';
import { writeFileSync, readFileSync, existsSync } from 'fs';
import { join } from 'path';
import { createClient } from '@supabase/supabase-js';
import { SendGridEmailService } from '../src/lib/email/sendgrid-service';
import { getAlertManager } from '../src/lib/audit/alert-manager';

interface DeploymentResult {
  success: boolean;
  deploymentUrl?: string;
  errors: string[];
  warnings: string[];
}

interface MonitoringConfig {
  enabled: boolean;
  alertThresholds: {
    errorRate: number;
    responseTime: number;
    formFailureRate: number;
  };
  notificationEmail: string;
}

class CorrectionsDeployment {
  private supabase: any;
  private emailService: SendGridEmailService;
  private alertManager: any;
  private deploymentLog: string[] = [];

  constructor() {
    this.supabase = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL || '',
      process.env.SUPABASE_SERVICE_ROLE_KEY || ''
    );
    
    this.emailService = new SendGridEmailService();
    this.alertManager = getAlertManager();
  }

  /**
   * D√©ployer toutes les corrections
   */
  async deploy(): Promise<DeploymentResult> {
    const result: DeploymentResult = {
      success: false,
      errors: [],
      warnings: []
    };

    try {
      this.log('üöÄ D√©marrage du d√©ploiement des corrections...');

      // 1. V√©rifier l'√©tat du projet avant d√©ploiement
      await this.preDeploymentChecks(result);

      // 2. D√©ployer les corrections de liens
      await this.deployLinkCorrections(result);

      // 3. Publier les nouvelles pages ressources
      await this.publishResourcePages(result);

      // 4. Configurer le monitoring des erreurs 404
      await this.setupErrorMonitoring(result);

      // 5. Mettre en place les alertes pour les formulaires
      await this.setupFormAlerts(result);

      // 6. Documenter les changements
      await this.documentChanges(result);

      // 7. Tests post-d√©ploiement
      await this.postDeploymentTests(result);

      result.success = result.errors.length === 0;
      
      if (result.success) {
        this.log('‚úÖ D√©ploiement des corrections termin√© avec succ√®s !');
        await this.sendDeploymentNotification(true, result);
      } else {
        this.log('‚ùå D√©ploiement √©chou√© avec des erreurs');
        await this.sendDeploymentNotification(false, result);
      }

    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Erreur inconnue';
      result.errors.push(errorMessage);
      this.log(`‚ùå Erreur critique: ${errorMessage}`);
      await this.sendDeploymentNotification(false, result);
    }

    return result;
  }

  /**
   * V√©rifications pr√©-d√©ploiement
   */
  private async preDeploymentChecks(result: DeploymentResult): Promise<void> {
    this.log('üîç V√©rifications pr√©-d√©ploiement...');

    try {
      // V√©rifier que les pages ressources existent
      const resourcePages = [
        'src/app/ressources/outil-tableau-bord/page.tsx',
        'src/app/ressources/grille-evaluation/page.tsx',
        'src/app/ressources/reporting-automatise/page.tsx'
      ];

      for (const page of resourcePages) {
        if (!existsSync(page)) {
          result.errors.push(`Page ressource manquante: ${page}`);
        } else {
          this.log(`‚úÖ Page trouv√©e: ${page}`);
        }
      }

      // V√©rifier les composants de correction des liens
      const conversionCTAsPath = 'src/components/sections/negotiation/ConversionCTAs.tsx';
      if (!existsSync(conversionCTAsPath)) {
        result.errors.push(`Composant ConversionCTAs manquant: ${conversionCTAsPath}`);
      } else {
        // V√©rifier que les liens sont corrig√©s
        const content = readFileSync(conversionCTAsPath, 'utf-8');
        if (!content.includes('/coach-commercial-entreprise') || !content.includes('/bootcamp-commercial-intensif')) {
          result.warnings.push('Les liens dans ConversionCTAs pourraient ne pas √™tre corrig√©s');
        } else {
          this.log('‚úÖ Liens CTA corrig√©s d√©tect√©s');
        }
      }

      // V√©rifier la configuration de l'environnement
      const requiredEnvVars = [
        'NEXT_PUBLIC_SUPABASE_URL',
        'SUPABASE_SERVICE_ROLE_KEY',
        'SENDGRID_API_KEY',
        'ADMIN_EMAIL'
      ];

      for (const envVar of requiredEnvVars) {
        if (!process.env[envVar]) {
          result.errors.push(`Variable d'environnement manquante: ${envVar}`);
        }
      }

      this.log('‚úÖ V√©rifications pr√©-d√©ploiement termin√©es');

    } catch (error) {
      result.errors.push(`Erreur lors des v√©rifications: ${error}`);
    }
  }

  /**
   * D√©ployer les corrections de liens
   */
  private async deployLinkCorrections(result: DeploymentResult): Promise<void> {
    this.log('üîó D√©ploiement des corrections de liens...');

    try {
      // V√©rifier que le build fonctionne
      this.log('üì¶ Construction du projet...');
      execSync('npm run build', { stdio: 'pipe' });
      this.log('‚úÖ Build r√©ussi');

      // D√©ployer sur Vercel (ou autre plateforme)
      if (process.env.VERCEL_TOKEN) {
        this.log('üöÄ D√©ploiement sur Vercel...');
        const deployOutput = execSync('vercel --prod --token $VERCEL_TOKEN', { 
          stdio: 'pipe',
          encoding: 'utf-8'
        });
        
        // Extraire l'URL de d√©ploiement
        const urlMatch = deployOutput.match(/https:\/\/[^\s]+/);
        if (urlMatch) {
          result.deploymentUrl = urlMatch[0];
          this.log(`‚úÖ D√©ploy√© sur: ${result.deploymentUrl}`);
        }
      } else {
        result.warnings.push('Token Vercel non configur√©, d√©ploiement manuel requis');
      }

    } catch (error) {
      result.errors.push(`Erreur lors du d√©ploiement: ${error}`);
    }
  }

  /**
   * Publier les nouvelles pages ressources
   */
  private async publishResourcePages(result: DeploymentResult): Promise<void> {
    this.log('üìÑ Publication des pages ressources...');

    try {
      // Enregistrer les nouvelles pages dans la base de donn√©es pour le monitoring
      const resourcePages = [
        {
          url: '/ressources/outil-tableau-bord',
          title: 'Outil Tableau de Bord Commercial',
          type: 'resource_page',
          priority: 'high'
        },
        {
          url: '/ressources/grille-evaluation',
          title: 'Grille d\'√âvaluation Performance',
          type: 'resource_page',
          priority: 'high'
        },
        {
          url: '/ressources/reporting-automatise',
          title: 'Reporting Automatis√©',
          type: 'resource_page',
          priority: 'high'
        }
      ];

      for (const page of resourcePages) {
        // Ajouter √† la table de monitoring des liens
        const { error } = await this.supabase
          .from('scanned_links')
          .upsert({
            url: page.url,
            source_file: `src/app${page.url}/page.tsx`,
            link_type: 'internal',
            priority: page.priority,
            last_scanned: new Date().toISOString()
          });

        if (error) {
          result.warnings.push(`Erreur lors de l'enregistrement de ${page.url}: ${error.message}`);
        } else {
          this.log(`‚úÖ Page enregistr√©e pour monitoring: ${page.url}`);
        }
      }

    } catch (error) {
      result.errors.push(`Erreur lors de la publication des pages: ${error}`);
    }
  }

  /**
   * Configurer le monitoring des erreurs 404
   */
  private async setupErrorMonitoring(result: DeploymentResult): Promise<void> {
    this.log('üìä Configuration du monitoring des erreurs 404...');

    try {
      // Cr√©er une table pour tracker les erreurs 404 si elle n'existe pas
      const { error: createTableError } = await this.supabase.rpc('create_404_monitoring_table');
      
      if (createTableError && !createTableError.message.includes('already exists')) {
        result.warnings.push(`Erreur cr√©ation table monitoring: ${createTableError.message}`);
      }

      // Configurer les alertes pour les erreurs 404
      this.alertManager.updateThresholds({
        criticalLinksThreshold: 3, // Alerte si 3+ liens critiques cass√©s
        healthScoreThreshold: 90,  // Alerte si score < 90%
        brokenLinksIncreaseThreshold: 5 // Alerte si +5 liens cass√©s
      });

      // Programmer un audit imm√©diat pour v√©rifier les nouvelles pages
      const { error: auditError } = await this.supabase
        .from('audit_queue')
        .insert({
          task_type: 'full_audit',
          priority: 'high',
          scheduled_for: new Date().toISOString(),
          created_by: 'deployment_script'
        });

      if (auditError) {
        result.warnings.push(`Erreur programmation audit: ${auditError.message}`);
      } else {
        this.log('‚úÖ Audit programm√© pour v√©rifier les nouvelles pages');
      }

    } catch (error) {
      result.errors.push(`Erreur configuration monitoring: ${error}`);
    }
  }

  /**
   * Mettre en place les alertes pour les formulaires
   */
  private async setupFormAlerts(result: DeploymentResult): Promise<void> {
    this.log('üìß Configuration des alertes formulaires...');

    try {
      // Configurer le monitoring des formulaires de ressources
      const monitoringConfig: MonitoringConfig = {
        enabled: true,
        alertThresholds: {
          errorRate: 5, // Alerte si > 5% d'erreurs
          responseTime: 3000, // Alerte si > 3s de r√©ponse
          formFailureRate: 10 // Alerte si > 10% d'√©checs de formulaire
        },
        notificationEmail: process.env.ADMIN_EMAIL || 'ls@laurentserre.com'
      };

      // Sauvegarder la configuration
      const { error } = await this.supabase
        .from('monitoring_config')
        .upsert({
          config_type: 'form_monitoring',
          config_data: monitoringConfig,
          updated_at: new Date().toISOString()
        });

      if (error) {
        result.warnings.push(`Erreur sauvegarde config monitoring: ${error.message}`);
      } else {
        this.log('‚úÖ Configuration des alertes formulaires sauvegard√©e');
      }

      // Tester l'envoi d'alertes
      const testSuccess = await this.alertManager.testAlerts();
      if (!testSuccess) {
        result.warnings.push('Test des alertes √©chou√©');
      } else {
        this.log('‚úÖ Test des alertes r√©ussi');
      }

    } catch (error) {
      result.errors.push(`Erreur configuration alertes formulaires: ${error}`);
    }
  }

  /**
   * Documenter les changements
   */
  private async documentChanges(result: DeploymentResult): Promise<void> {
    this.log('üìù Documentation des changements...');

    try {
      const changelogEntry = {
        date: new Date().toISOString(),
        version: this.getVersionFromPackage(),
        changes: [
          {
            type: 'fix',
            description: 'Correction des liens CTA dans les pages de techniques de n√©gociation',
            files: ['src/components/sections/negotiation/ConversionCTAs.tsx'],
            impact: 'R√©solution des erreurs 404 sur les liens "Coaching individuel" et "Formation √©quipe"'
          },
          {
            type: 'feature',
            description: 'Cr√©ation des pages ressources manquantes',
            files: [
              'src/app/ressources/outil-tableau-bord/page.tsx',
              'src/app/ressources/grille-evaluation/page.tsx',
              'src/app/ressources/reporting-automatise/page.tsx'
            ],
            impact: 'R√©solution des erreurs 404 sur les liens de ressources de la page suivi-performance'
          },
          {
            type: 'enhancement',
            description: 'Mise en place du monitoring avanc√© des erreurs 404',
            files: ['scripts/deploy-corrections.ts', 'src/lib/audit/alert-manager.ts'],
            impact: 'D√©tection proactive des liens cass√©s et alertes automatiques'
          }
        ],
        deploymentUrl: result.deploymentUrl,
        deploymentLog: this.deploymentLog
      };

      // Sauvegarder dans la base de donn√©es
      const { error } = await this.supabase
        .from('deployment_history')
        .insert({
          version: changelogEntry.version,
          changes: changelogEntry.changes,
          deployment_url: changelogEntry.deploymentUrl,
          deployment_log: changelogEntry.deploymentLog,
          success: result.errors.length === 0,
          created_at: new Date().toISOString()
        });

      if (error) {
        result.warnings.push(`Erreur sauvegarde changelog: ${error.message}`);
      }

      // Cr√©er un fichier de documentation
      const changelogPath = join(process.cwd(), 'DEPLOYMENT_CHANGELOG.md');
      const changelogContent = this.generateChangelogMarkdown(changelogEntry);
      
      // Ajouter au changelog existant ou cr√©er un nouveau
      let existingChangelog = '';
      if (existsSync(changelogPath)) {
        existingChangelog = readFileSync(changelogPath, 'utf-8');
      }

      const updatedChangelog = changelogContent + '\n\n' + existingChangelog;
      writeFileSync(changelogPath, updatedChangelog);

      this.log(`‚úÖ Changelog mis √† jour: ${changelogPath}`);

    } catch (error) {
      result.errors.push(`Erreur documentation: ${error}`);
    }
  }

  /**
   * Tests post-d√©ploiement
   */
  private async postDeploymentTests(result: DeploymentResult): Promise<void> {
    this.log('üß™ Tests post-d√©ploiement...');

    try {
      const baseUrl = result.deploymentUrl || process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000';

      // Tester les pages ressources
      const pagesToTest = [
        '/ressources/outil-tableau-bord',
        '/ressources/grille-evaluation',
        '/ressources/reporting-automatise'
      ];

      for (const page of pagesToTest) {
        try {
          const response = await fetch(`${baseUrl}${page}`);
          if (response.ok) {
            this.log(`‚úÖ Page accessible: ${page}`);
          } else {
            result.warnings.push(`Page non accessible (${response.status}): ${page}`);
          }
        } catch (error) {
          result.warnings.push(`Erreur test page ${page}: ${error}`);
        }
      }

      // Tester l'API de demande de ressources
      try {
        const testData = {
          userEmail: 'test@example.com',
          resourceUrl: '/test-resource',
          sourceUrl: `${baseUrl}/test`,
          message: 'Test post-d√©ploiement'
        };

        const response = await fetch(`${baseUrl}/api/resource-request`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(testData)
        });

        if (response.ok) {
          this.log('‚úÖ API resource-request fonctionnelle');
        } else {
          result.warnings.push(`API resource-request non fonctionnelle: ${response.status}`);
        }
      } catch (error) {
        result.warnings.push(`Erreur test API: ${error}`);
      }

    } catch (error) {
      result.errors.push(`Erreur tests post-d√©ploiement: ${error}`);
    }
  }

  /**
   * Envoyer une notification de d√©ploiement
   */
  private async sendDeploymentNotification(success: boolean, result: DeploymentResult): Promise<void> {
    try {
      const subject = success 
        ? '‚úÖ D√©ploiement des corrections r√©ussi'
        : '‚ùå D√©ploiement des corrections √©chou√©';

      const htmlContent = `
        <h2>${subject}</h2>
        <p><strong>Date:</strong> ${new Date().toLocaleString('fr-FR')}</p>
        <p><strong>URL de d√©ploiement:</strong> ${result.deploymentUrl || 'Non disponible'}</p>
        
        ${result.errors.length > 0 ? `
          <h3>‚ùå Erreurs (${result.errors.length}):</h3>
          <ul>
            ${result.errors.map(error => `<li>${error}</li>`).join('')}
          </ul>
        ` : ''}
        
        ${result.warnings.length > 0 ? `
          <h3>‚ö†Ô∏è Avertissements (${result.warnings.length}):</h3>
          <ul>
            ${result.warnings.map(warning => `<li>${warning}</li>`).join('')}
          </ul>
        ` : ''}
        
        <h3>üìã Changements d√©ploy√©s:</h3>
        <ul>
          <li>‚úÖ Correction des liens CTA dans les pages de n√©gociation</li>
          <li>‚úÖ Cr√©ation des pages ressources manquantes</li>
          <li>‚úÖ Configuration du monitoring des erreurs 404</li>
          <li>‚úÖ Mise en place des alertes pour les formulaires</li>
        </ul>
        
        <h3>üìä Log de d√©ploiement:</h3>
        <pre>${this.deploymentLog.join('\n')}</pre>
      `;

      await this.emailService.sendEmail({
        to: process.env.ADMIN_EMAIL || 'ls@laurentserre.com',
        subject,
        html: htmlContent
      });

    } catch (error) {
      console.error('Erreur envoi notification:', error);
    }
  }

  /**
   * Utilitaires
   */
  private log(message: string): void {
    const timestamp = new Date().toISOString();
    const logMessage = `[${timestamp}] ${message}`;
    console.log(logMessage);
    this.deploymentLog.push(logMessage);
  }

  private getVersionFromPackage(): string {
    try {
      const packageJson = JSON.parse(readFileSync('package.json', 'utf-8'));
      return packageJson.version || '1.0.0';
    } catch {
      return '1.0.0';
    }
  }

  private generateChangelogMarkdown(entry: any): string {
    return `# D√©ploiement ${entry.version} - ${new Date(entry.date).toLocaleDateString('fr-FR')}

## üöÄ Changements d√©ploy√©s

${entry.changes.map((change: any) => `
### ${change.type === 'fix' ? 'üêõ' : change.type === 'feature' ? '‚ú®' : 'üîß'} ${change.description}

**Fichiers modifi√©s:**
${change.files.map((file: string) => `- \`${file}\``).join('\n')}

**Impact:** ${change.impact}
`).join('\n')}

## üìä Informations de d√©ploiement

- **URL de d√©ploiement:** ${entry.deploymentUrl || 'Non disponible'}
- **Date:** ${new Date(entry.date).toLocaleString('fr-FR')}
- **Statut:** ${entry.deploymentLog.some((log: string) => log.includes('‚ùå')) ? '‚ùå √âchec' : '‚úÖ Succ√®s'}

---`;
  }
}

// Script principal
async function main() {
  console.log('üöÄ D√©marrage du script de d√©ploiement des corrections...');

  const deployment = new CorrectionsDeployment();
  const result = await deployment.deploy();

  if (result.success) {
    console.log('\n‚úÖ D√©ploiement termin√© avec succ√®s !');
    console.log(`üìä Erreurs: ${result.errors.length}`);
    console.log(`‚ö†Ô∏è Avertissements: ${result.warnings.length}`);
    if (result.deploymentUrl) {
      console.log(`üåê URL: ${result.deploymentUrl}`);
    }
    process.exit(0);
  } else {
    console.log('\n‚ùå D√©ploiement √©chou√©');
    console.log('Erreurs:');
    result.errors.forEach(error => console.log(`  - ${error}`));
    process.exit(1);
  }
}

// Ex√©cuter le script si appel√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error);
}

export { CorrectionsDeployment };