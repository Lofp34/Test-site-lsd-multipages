#!/usr/bin/env tsx

/**
 * Script de validation pour v√©rifier l'int√©gration correcte de l'API Gemini officielle
 * Bas√© sur la documentation Google officielle
 */

import { readFileSync, existsSync } from 'fs';
import chalk from 'chalk';

interface ValidationResult {
  file: string;
  hasCorrectPackage: boolean;
  hasCorrectImport: boolean;
  hasCorrectInitialization: boolean;
  issues: string[];
}

async function validateOfficialGeminiAPI(): Promise<void> {
  console.log(chalk.blue('üîç Validation de l\'API Gemini officielle selon la documentation Google...'));
  
  // V√©rifier package.json
  console.log('\nüì¶ V√©rification des d√©pendances...');
  
  if (!existsSync('package.json')) {
    console.log(chalk.red('‚ùå package.json non trouv√©'));
    return;
  }

  const packageJson = JSON.parse(readFileSync('package.json', 'utf-8'));
  
  // V√©rifier le bon package
  if (packageJson.dependencies['@google/genai']) {
    console.log(chalk.green('‚úÖ Package @google/genai install√©'));
  } else {
    console.log(chalk.red('‚ùå Package @google/genai manquant'));
  }

  if (packageJson.dependencies['@google/generative-ai']) {
    console.log(chalk.yellow('‚ö†Ô∏è  Package @google/generative-ai pr√©sent (devrait √™tre supprim√©)'));
  }

  // Fichiers √† v√©rifier
  const productionFiles = [
    'src/app/api/chat/files/upload/route.ts',
    'src/app/api/chat/gemini/route.ts',
    'src/app/api/chat/gemini/route-complex.ts',
    'src/lib/gemini/service.ts',
    'src/hooks/useGeminiChatSimple.ts',
  ];

  const results: ValidationResult[] = [];
  let hasErrors = false;

  console.log('\nüìã Validation des fichiers de production...');

  for (const file of productionFiles) {
    if (!existsSync(file)) {
      console.log(chalk.yellow(`‚ö†Ô∏è  Fichier non trouv√©: ${file}`));
      continue;
    }

    const content = readFileSync(file, 'utf-8');
    const issues: string[] = [];

    // V√©rifier l'import correct
    const hasCorrectImport = content.includes('from "@google/genai"') || 
                            content.includes("from '@google/genai'");
    
    if (!hasCorrectImport && content.includes('GoogleGenAI')) {
      issues.push('Import incorrect: devrait √™tre from "@google/genai"');
      hasErrors = true;
    }

    // V√©rifier l'ancien package
    if (content.includes('@google/generative-ai')) {
      issues.push('Utilise encore l\'ancien package @google/generative-ai');
      hasErrors = true;
    }

    // V√©rifier l'initialisation correcte
    const hasCorrectInit = content.includes('new GoogleGenAI({') && 
                          !content.includes('new GoogleGenerativeAI(');

    if (content.includes('new GoogleGenAI') && !hasCorrectInit) {
      issues.push('Initialisation incorrecte: devrait √™tre new GoogleGenAI({ apiKey })');
      hasErrors = true;
    }

    // V√©rifier les m√©thodes correctes
    if (content.includes('ai.chats.create') || content.includes('chat.sendMessageStream')) {
      // C'est correct selon la documentation
    } else if (content.includes('getGenerativeModel') || content.includes('startChat')) {
      issues.push('Utilise des m√©thodes de l\'ancienne API');
      hasErrors = true;
    }

    results.push({
      file,
      hasCorrectPackage: hasCorrectImport,
      hasCorrectImport,
      hasCorrectInitialization: hasCorrectInit,
      issues
    });
  }

  // Afficher les r√©sultats
  console.log('\nüìä R√©sultats de validation:');
  
  for (const result of results) {
    if (result.issues.length === 0) {
      console.log(chalk.green(`‚úÖ ${result.file}`));
    } else {
      console.log(chalk.red(`‚ùå ${result.file}`));
      result.issues.forEach(issue => {
        console.log(chalk.red(`   - ${issue}`));
      });
    }
  }

  // V√©rifier la r√®gle de steering
  console.log('\nüìö V√©rification de la documentation...');
  
  if (existsSync('.kiro/steering/google-gemini-api-integration.md')) {
    console.log(chalk.green('‚úÖ R√®gle d\'int√©gration API Gemini cr√©√©e'));
  } else {
    console.log(chalk.yellow('‚ö†Ô∏è  R√®gle d\'int√©gration manquante'));
  }

  // R√©sum√© final
  if (hasErrors) {
    console.log(chalk.red('\n‚ùå √âCHEC: L\'int√©gration API Gemini n\'est pas conforme'));
    console.log(chalk.yellow('   Corrigez les probl√®mes list√©s ci-dessus'));
    console.log(chalk.blue('   R√©f√©rence: Guide de d√©marrage rapide API Gemini - Google AI for Developers'));
    process.exit(1);
  } else {
    console.log(chalk.green('\n‚úÖ SUCC√àS: Int√©gration API Gemini conforme √† la documentation officielle'));
    console.log(chalk.green('   Package: @google/genai'));
    console.log(chalk.green('   Import: GoogleGenAI from "@google/genai"'));
    console.log(chalk.green('   Initialisation: new GoogleGenAI({ apiKey })'));
    console.log(chalk.green('   M√©thodes: ai.chats.create(), chat.sendMessageStream()'));
    console.log(chalk.blue('\nüöÄ Le build Vercel devrait maintenant r√©ussir'));
  }
}

// Points de contr√¥le selon la documentation officielle
function displayOfficialChecklist() {
  console.log(chalk.blue('\nüìã Checklist documentation officielle Google:'));
  console.log('1. ‚úÖ Package @google/genai install√©');
  console.log('2. ‚úÖ Import { GoogleGenAI } from "@google/genai"');
  console.log('3. ‚úÖ Initialisation new GoogleGenAI({ apiKey })');
  console.log('4. ‚úÖ Variable GEMINI_API_KEY configur√©e');
  console.log('5. ‚úÖ Mod√®le gemini-2.5-flash utilis√©');
  console.log('6. ‚úÖ ThinkingBudget: 0 pour la performance');
  console.log('7. ‚úÖ M√©thodes ai.models.generateContent()');
  console.log('8. ‚úÖ Chat ai.chats.create()');
  console.log('9. ‚úÖ Streaming chat.sendMessageStream()');
  console.log('10. ‚úÖ Multimodal createUserContent, createPartFromUri');
}

// Ex√©cution
validateOfficialGeminiAPI()
  .then(() => displayOfficialChecklist())
  .catch(console.error);