#!/usr/bin/env tsx

/**
 * Simple test script for the continuous monitoring system
 * This version works without external API dependencies
 */

console.log('üß™ Test simple du syst√®me de monitoring continu...\n');

// Test 1: V√©rifier que les modules se chargent correctement
console.log('üîç Test 1: Chargement des modules...');
try {
  // Test des imports sans instanciation
  const continuousMonitoringModule = await import('../src/lib/monitoring/continuous-monitoring');
  console.log('‚úÖ Module continuous-monitoring charg√©');
  
  const vercelUsageModule = await import('../src/lib/vercel/usage-monitor');
  console.log('‚úÖ Module usage-monitor charg√©');
  
  const performanceAlertsModule = await import('../src/lib/vercel/performance-alerts');
  console.log('‚úÖ Module performance-alerts charg√©');
  
  const fallbackManagerModule = await import('../src/lib/vercel/fallback-manager');
  console.log('‚úÖ Module fallback-manager charg√©');
  
  console.log('‚úÖ Test 1 r√©ussi - Tous les modules se chargent correctement\n');
} catch (error) {
  console.log('‚ùå Test 1 √©chou√©:', error instanceof Error ? error.message : 'Erreur inconnue');
  process.exit(1);
}

// Test 2: V√©rifier la structure des types
console.log('üîç Test 2: V√©rification des types...');
try {
  const { continuousMonitoring } = await import('../src/lib/monitoring/continuous-monitoring');
  
  // V√©rifier que l'instance existe
  if (!continuousMonitoring) {
    throw new Error('Instance continuousMonitoring non disponible');
  }
  
  // V√©rifier les m√©thodes principales
  const methods = ['start', 'stop', 'getStatus', 'getCurrentMetrics', 'getAlertRules'];
  for (const method of methods) {
    if (typeof (continuousMonitoring as any)[method] !== 'function') {
      throw new Error(`M√©thode manquante: ${method}`);
    }
  }
  
  console.log('‚úÖ Test 2 r√©ussi - Structure des types correcte\n');
} catch (error) {
  console.log('‚ùå Test 2 √©chou√©:', error instanceof Error ? error.message : 'Erreur inconnue');
  process.exit(1);
}

// Test 3: V√©rifier le statut initial
console.log('üîç Test 3: Statut initial...');
try {
  const { continuousMonitoring } = await import('../src/lib/monitoring/continuous-monitoring');
  
  const status = continuousMonitoring.getStatus();
  
  if (typeof status.isRunning !== 'boolean') {
    throw new Error('status.isRunning doit √™tre un boolean');
  }
  
  if (typeof status.metricsCount !== 'number') {
    throw new Error('status.metricsCount doit √™tre un nombre');
  }
  
  console.log('üìä Statut initial:', {
    isRunning: status.isRunning,
    metricsCount: status.metricsCount,
    activeRules: status.activeRules
  });
  
  console.log('‚úÖ Test 3 r√©ussi - Statut initial correct\n');
} catch (error) {
  console.log('‚ùå Test 3 √©chou√©:', error instanceof Error ? error.message : 'Erreur inconnue');
  process.exit(1);
}

// Test 4: V√©rifier les r√®gles d'alerte par d√©faut
console.log('üîç Test 4: R√®gles d\'alerte par d√©faut...');
try {
  const { continuousMonitoring } = await import('../src/lib/monitoring/continuous-monitoring');
  
  const rules = continuousMonitoring.getAlertRules();
  
  if (!Array.isArray(rules)) {
    throw new Error('getAlertRules doit retourner un tableau');
  }
  
  if (rules.length === 0) {
    throw new Error('Aucune r√®gle d\'alerte par d√©faut trouv√©e');
  }
  
  // V√©rifier la structure des r√®gles
  const firstRule = rules[0];
  const requiredFields = ['id', 'name', 'severity', 'enabled', 'cooldownMinutes'];
  
  for (const field of requiredFields) {
    if (!(field in firstRule)) {
      throw new Error(`Champ manquant dans la r√®gle: ${field}`);
    }
  }
  
  console.log('üìã R√®gles d\'alerte trouv√©es:', rules.length);
  console.log('üìã R√®gles actives:', rules.filter(r => r.enabled).length);
  
  console.log('‚úÖ Test 4 r√©ussi - R√®gles d\'alerte configur√©es\n');
} catch (error) {
  console.log('‚ùå Test 4 √©chou√©:', error instanceof Error ? error.message : 'Erreur inconnue');
  process.exit(1);
}

// Test 5: Test de manipulation des r√®gles
console.log('üîç Test 5: Manipulation des r√®gles...');
try {
  const { continuousMonitoring } = await import('../src/lib/monitoring/continuous-monitoring');
  
  // Ajouter une r√®gle de test
  const testRule = {
    id: 'test_rule_simple',
    name: 'Test Rule Simple',
    condition: () => false,
    severity: 'info' as const,
    message: () => 'Test message',
    cooldownMinutes: 5,
    enabled: true
  };
  
  continuousMonitoring.addAlertRule(testRule);
  
  // V√©rifier que la r√®gle a √©t√© ajout√©e
  const rules = continuousMonitoring.getAlertRules();
  const addedRule = rules.find(r => r.id === 'test_rule_simple');
  
  if (!addedRule) {
    throw new Error('R√®gle de test non ajout√©e');
  }
  
  // Modifier la r√®gle
  const updateSuccess = continuousMonitoring.updateAlertRule('test_rule_simple', {
    enabled: false
  });
  
  if (!updateSuccess) {
    throw new Error('Impossible de modifier la r√®gle');
  }
  
  // Supprimer la r√®gle
  const removeSuccess = continuousMonitoring.removeAlertRule('test_rule_simple');
  
  if (!removeSuccess) {
    throw new Error('Impossible de supprimer la r√®gle');
  }
  
  console.log('‚úÖ Test 5 r√©ussi - Manipulation des r√®gles fonctionne\n');
} catch (error) {
  console.log('‚ùå Test 5 √©chou√©:', error instanceof Error ? error.message : 'Erreur inconnue');
  process.exit(1);
}

// Test 6: V√©rifier la documentation
console.log('üîç Test 6: Documentation...');
try {
  const fs = await import('fs');
  const path = await import('path');
  
  const docPath = path.join(process.cwd(), 'src/lib/monitoring/CONTINUOUS_MONITORING_DOCUMENTATION.md');
  
  if (!fs.existsSync(docPath)) {
    throw new Error('Documentation manquante');
  }
  
  const docContent = fs.readFileSync(docPath, 'utf-8');
  
  if (docContent.length < 1000) {
    throw new Error('Documentation trop courte');
  }
  
  // V√©rifier que les sections principales sont pr√©sentes
  const requiredSections = [
    '## Vue d\'ensemble',
    '## Fonctionnalit√©s Principales',
    '## Architecture Technique',
    '## Configuration et D√©ploiement',
    '## Utilisation'
  ];
  
  for (const section of requiredSections) {
    if (!docContent.includes(section)) {
      throw new Error(`Section manquante dans la documentation: ${section}`);
    }
  }
  
  console.log('üìö Documentation trouv√©e:', Math.round(docContent.length / 1000) + 'k caract√®res');
  console.log('‚úÖ Test 6 r√©ussi - Documentation compl√®te\n');
} catch (error) {
  console.log('‚ùå Test 6 √©chou√©:', error instanceof Error ? error.message : 'Erreur inconnue');
  process.exit(1);
}

// R√©sum√© final
console.log('üéâ TOUS LES TESTS SONT PASS√âS AVEC SUCC√àS !');
console.log('‚úÖ Le syst√®me de monitoring continu est correctement impl√©ment√©');
console.log('');
console.log('üìã R√©sum√© des fonctionnalit√©s valid√©es:');
console.log('  ‚Ä¢ ‚úÖ Chargement des modules');
console.log('  ‚Ä¢ ‚úÖ Structure des types');
console.log('  ‚Ä¢ ‚úÖ Statut du syst√®me');
console.log('  ‚Ä¢ ‚úÖ R√®gles d\'alerte par d√©faut');
console.log('  ‚Ä¢ ‚úÖ Manipulation des r√®gles');
console.log('  ‚Ä¢ ‚úÖ Documentation compl√®te');
console.log('');
console.log('üöÄ Le monitoring continu est pr√™t √† √™tre utilis√© !');
console.log('');
console.log('üìù Prochaines √©tapes:');
console.log('  1. Configurer les variables d\'environnement (VERCEL_TOKEN, GITHUB_TOKEN)');
console.log('  2. Initialiser la base de donn√©es avec setup-continuous-monitoring-db.sql');
console.log('  3. D√©marrer le monitoring via l\'interface admin ou l\'API');
console.log('  4. Tester les alertes avec des seuils r√©els');
console.log('');
console.log('üîó Documentation: src/lib/monitoring/CONTINUOUS_MONITORING_DOCUMENTATION.md');
console.log('üéõÔ∏è Dashboard: /admin/continuous-monitoring');
console.log('üîå API: /api/admin/continuous-monitoring');