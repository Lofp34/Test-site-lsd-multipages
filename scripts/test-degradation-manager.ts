#!/usr/bin/env tsx

/**
 * Test script pour le DegradationManager
 * 
 * Ce script teste toutes les fonctionnalit√©s du syst√®me de d√©gradation gracieuse :
 * - √âvaluation de la charge syst√®me
 * - Changement automatique de niveau de service
 * - Circuit breakers
 * - Notifications de d√©gradation
 */

import { DegradationManager, ServiceLevel } from '../src/lib/vercel/degradation-manager';

async function testDegradationManager() {
  console.log('üß™ Test du DegradationManager');
  console.log('================================\n');

  // 1. Initialisation
  console.log('1Ô∏è‚É£ Initialisation du DegradationManager...');
  const degradationManager = new DegradationManager({
    checkInterval: 5000, // 5 secondes pour les tests
    stabilityPeriod: 10000, // 10 secondes pour les tests
    notificationCooldown: 15000, // 15 secondes pour les tests
  });

  console.log('‚úÖ DegradationManager initialis√©');
  console.log('üìä √âtat initial:', degradationManager.getCurrentStatus());
  console.log();

  // 2. Test d'√©valuation de la charge syst√®me
  console.log('2Ô∏è‚É£ Test d\'√©valuation de la charge syst√®me...');
  try {
    const systemLoad = await degradationManager.assessSystemLoad();
    console.log('‚úÖ Charge syst√®me √©valu√©e:', systemLoad);
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'√©valuation:', error);
  }
  console.log();

  // 3. Test des circuit breakers
  console.log('3Ô∏è‚É£ Test des circuit breakers...');
  
  // Test d'une op√©ration qui r√©ussit
  try {
    const result = await degradationManager.executeWithCircuitBreaker(
      'test_service',
      async () => {
        console.log('  üîÑ Ex√©cution d\'une op√©ration qui r√©ussit...');
        await new Promise(resolve => setTimeout(resolve, 100));
        return 'success';
      },
      { threshold: 3, timeout: 5000 }
    );
    console.log('  ‚úÖ Op√©ration r√©ussie:', result);
  } catch (error) {
    console.error('  ‚ùå Erreur inattendue:', error);
  }

  // Test d'une op√©ration qui √©choue
  console.log('  üîÑ Test d\'op√©rations qui √©chouent...');
  for (let i = 1; i <= 4; i++) {
    try {
      await degradationManager.executeWithCircuitBreaker(
        'failing_service',
        async () => {
          throw new Error(`√âchec simul√© ${i}`);
        },
        { threshold: 3, timeout: 5000 }
      );
    } catch (error) {
      console.log(`  ‚ùå √âchec ${i}/3:`, error.message);
    }
  }

  // V√©rifier l'√©tat du circuit breaker
  const circuitBreakerState = degradationManager.getCircuitBreakerStatus('failing_service');
  console.log('  üîç √âtat du circuit breaker:', circuitBreakerState);
  console.log();

  // 4. Test de changement forc√© de niveau de service
  console.log('4Ô∏è‚É£ Test de changement de niveau de service...');
  
  const levels = [ServiceLevel.ESSENTIAL, ServiceLevel.MINIMAL, ServiceLevel.FALLBACK, ServiceLevel.FULL];
  
  for (const level of levels) {
    try {
      console.log(`  üîÑ Changement vers ${level}...`);
      const changed = await degradationManager.forceServiceLevel(level, `Test de changement vers ${level}`);
      
      if (changed) {
        console.log(`  ‚úÖ Changement effectu√© vers ${level}`);
      } else {
        console.log(`  ‚è≥ Changement en attente (p√©riode de stabilit√©)`);
      }
      
      const status = degradationManager.getCurrentStatus();
      console.log(`  üìä √âtat actuel: ${status.currentLevel} (raison: ${status.reason})`);
      
      // Attendre un peu entre les changements
      await new Promise(resolve => setTimeout(resolve, 2000));
    } catch (error) {
      console.error(`  ‚ùå Erreur lors du changement vers ${level}:`, error);
    }
  }
  console.log();

  // 5. Test du monitoring automatique
  console.log('5Ô∏è‚É£ Test du monitoring automatique...');
  console.log('  üîÑ D√©marrage du monitoring (10 secondes)...');
  
  degradationManager.startMonitoring();
  
  // Attendre 10 secondes pour voir le monitoring en action
  await new Promise(resolve => setTimeout(resolve, 10000));
  
  degradationManager.stopMonitoring();
  console.log('  ‚èπÔ∏è Monitoring arr√™t√©');
  console.log();

  // 6. Test de v√©rification forc√©e
  console.log('6Ô∏è‚É£ Test de v√©rification forc√©e...');
  try {
    const status = await degradationManager.forceCheck();
    console.log('‚úÖ V√©rification forc√©e termin√©e');
    console.log('üìä √âtat final:', {
      niveau: status.currentLevel,
      raison: status.reason,
      charge: status.systemLoad,
      prochaine_verification: status.nextCheck,
    });
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification forc√©e:', error);
  }
  console.log();

  // 7. Test des m√©triques et historique
  console.log('7Ô∏è‚É£ Test des m√©triques et historique...');
  
  const metricsHistory = degradationManager.getSystemMetricsHistory();
  console.log(`üìà Historique des m√©triques: ${metricsHistory.length} entr√©es`);
  
  if (metricsHistory.length > 0) {
    const latest = metricsHistory[metricsHistory.length - 1];
    console.log('üìä Derni√®res m√©triques:', {
      cpu: `${latest.cpuUsage.toFixed(1)}%`,
      memory: `${latest.memoryUsage.toFixed(1)}%`,
      vercel: `${latest.vercelUsage.toFixed(1)}%`,
      errors: `${latest.errorRate.toFixed(1)}%`,
      responseTime: `${latest.responseTime.toFixed(0)}ms`,
    });
  }

  const allCircuitBreakers = degradationManager.getAllCircuitBreakers();
  console.log(`üõ°Ô∏è Circuit breakers actifs: ${allCircuitBreakers.length}`);
  
  for (const breaker of allCircuitBreakers) {
    console.log(`  - ${breaker.name}: ${breaker.state} (√©checs: ${breaker.failureCount}/${breaker.threshold})`);
  }
  console.log();

  // 8. Test de r√©initialisation des circuit breakers
  console.log('8Ô∏è‚É£ Test de r√©initialisation des circuit breakers...');
  
  const resetResult = degradationManager.resetCircuitBreaker('failing_service');
  console.log(`üîÑ R√©initialisation du circuit breaker: ${resetResult ? 'succ√®s' : '√©chec'}`);
  
  const resetState = degradationManager.getCircuitBreakerStatus('failing_service');
  console.log('üîç √âtat apr√®s r√©initialisation:', resetState);
  console.log();

  // 9. R√©sum√© final
  console.log('9Ô∏è‚É£ R√©sum√© final');
  console.log('================');
  
  const finalStatus = degradationManager.getCurrentStatus();
  console.log('üìä √âtat final du syst√®me:');
  console.log(`  - Niveau de service: ${finalStatus.currentLevel}`);
  console.log(`  - Niveau pr√©c√©dent: ${finalStatus.previousLevel}`);
  console.log(`  - Derni√®re modification: ${finalStatus.changedAt.toISOString()}`);
  console.log(`  - Raison: ${finalStatus.reason}`);
  console.log(`  - Prochaine v√©rification: ${finalStatus.nextCheck.toISOString()}`);
  
  if (finalStatus.stabilityCountdown > 0) {
    console.log(`  - P√©riode de stabilit√©: ${Math.round(finalStatus.stabilityCountdown / 1000)}s restantes`);
  }

  console.log('\n‚úÖ Test du DegradationManager termin√© avec succ√®s!');
}

// Fonction utilitaire pour simuler une charge syst√®me √©lev√©e
async function simulateHighLoad() {
  console.log('‚ö° Simulation d\'une charge syst√®me √©lev√©e...');
  
  // Simuler une charge CPU √©lev√©e
  const startTime = Date.now();
  while (Date.now() - startTime < 1000) {
    Math.random() * Math.random();
  }
  
  console.log('‚úÖ Simulation de charge termin√©e');
}

// Fonction utilitaire pour tester la r√©silience
async function testResilience() {
  console.log('üõ°Ô∏è Test de r√©silience du syst√®me...');
  
  const degradationManager = new DegradationManager();
  
  // Simuler plusieurs services qui √©chouent simultan√©ment
  const services = ['database', 'vercel_api', 'link_validation', 'email_service'];
  
  for (const service of services) {
    try {
      await degradationManager.executeWithCircuitBreaker(
        service,
        async () => {
          throw new Error(`Service ${service} indisponible`);
        }
      );
    } catch (error) {
      console.log(`‚ùå ${service}: ${error.message}`);
    }
  }
  
  // V√©rifier l'√©tat de tous les circuit breakers
  const allBreakers = degradationManager.getAllCircuitBreakers();
  console.log('üîç √âtat des circuit breakers apr√®s √©checs:');
  
  for (const breaker of allBreakers) {
    console.log(`  - ${breaker.name}: ${breaker.state} (${breaker.failureCount} √©checs)`);
  }
  
  console.log('‚úÖ Test de r√©silience termin√©');
}

// Ex√©cution du script
if (import.meta.url === `file://${process.argv[1]}`) {
  testDegradationManager()
    .then(() => {
      console.log('\nüéâ Tous les tests sont termin√©s!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\nüí• Erreur lors des tests:', error);
      process.exit(1);
    });
}

export { testDegradationManager, simulateHighLoad, testResilience };