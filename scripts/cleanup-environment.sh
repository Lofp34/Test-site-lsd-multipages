#!/bin/bash

# Script de nettoyage de l'environnement Next.js
# R√©sout les erreurs ERR_INVALID_PACKAGE_CONFIG

set -e  # Arr√™ter en cas d'erreur

echo "üßπ D√©marrage du nettoyage de l'environnement Next.js..."
echo "=================================================="

# Fonction pour afficher les √©tapes
log_step() {
    echo ""
    echo "üìã $1"
    echo "----------------------------------------"
}

# Fonction pour v√©rifier si un dossier existe avant de le supprimer
safe_remove() {
    if [ -d "$1" ] || [ -f "$1" ]; then
        echo "üóëÔ∏è  Suppression de $1"
        rm -rf "$1"
    else
        echo "‚ÑπÔ∏è  $1 n'existe pas (d√©j√† supprim√©)"
    fi
}

# √âtape 1: Arr√™ter les processus Next.js en cours
log_step "Arr√™t des processus Next.js en cours"
pkill -f "next dev" || echo "‚ÑπÔ∏è  Aucun processus Next.js en cours"
pkill -f "next start" || echo "‚ÑπÔ∏è  Aucun processus Next.js start en cours"

# √âtape 2: Supprimer node_modules
log_step "Suppression du dossier node_modules"
safe_remove "node_modules"

# √âtape 3: Supprimer les fichiers de build Next.js
log_step "Suppression des fichiers de build Next.js"
safe_remove ".next"
safe_remove "out"
safe_remove ".swc"

# √âtape 4: Supprimer les lock files
log_step "Suppression des lock files"
safe_remove "package-lock.json"
safe_remove "yarn.lock"
safe_remove "pnpm-lock.yaml"

# √âtape 5: Nettoyer les caches npm
log_step "Nettoyage des caches npm"
npm cache clean --force 2>/dev/null || echo "‚ö†Ô∏è  Impossible de nettoyer le cache npm"

# √âtape 6: Nettoyer les caches syst√®me (macOS/Linux)
log_step "Nettoyage des caches syst√®me"
if [[ "$OSTYPE" == "darwin"* ]]; then
    # macOS
    safe_remove "$HOME/Library/Caches/npm"
    safe_remove "$HOME/.npm"
    echo "üçé Caches macOS nettoy√©s"
elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
    # Linux
    safe_remove "$HOME/.cache/npm"
    safe_remove "$HOME/.npm"
    echo "üêß Caches Linux nettoy√©s"
fi

# √âtape 7: Nettoyer les caches npx
log_step "Nettoyage des caches npx"
npx clear-npx-cache 2>/dev/null || echo "‚ÑπÔ∏è  Pas de cache npx √† nettoyer"

# √âtape 8: Nettoyer les logs npm
log_step "Nettoyage des logs npm"
safe_remove "$HOME/.npm/_logs"

# √âtape 9: V√©rifier l'espace disque lib√©r√©
log_step "V√©rification de l'espace disque"
if command -v du &> /dev/null; then
    echo "üìä Espace dans le r√©pertoire actuel:"
    du -sh . 2>/dev/null || echo "‚ÑπÔ∏è  Impossible de calculer la taille"
fi

# √âtape 10: R√©sum√©
echo ""
echo "‚úÖ Nettoyage termin√© avec succ√®s!"
echo "=================================================="
echo ""
echo "üìã R√©sum√© des actions effectu√©es:"
echo "   ‚Ä¢ node_modules supprim√©"
echo "   ‚Ä¢ Fichiers de build Next.js supprim√©s (.next, out, .swc)"
echo "   ‚Ä¢ Lock files supprim√©s (package-lock.json, yarn.lock, pnpm-lock.yaml)"
echo "   ‚Ä¢ Caches npm nettoy√©s"
echo "   ‚Ä¢ Caches syst√®me nettoy√©s"
echo "   ‚Ä¢ Caches npx nettoy√©s"
echo ""
echo "üöÄ Prochaine √©tape: Lancez 'npm run fresh:install' pour r√©installer les d√©pendances"
echo ""

# V√©rifier si package.json existe
if [ ! -f "package.json" ]; then
    echo "‚ö†Ô∏è  ATTENTION: package.json introuvable!"
    echo "   Assurez-vous d'√™tre dans le bon r√©pertoire du projet"
    exit 1
fi

echo "‚ú® Environnement pr√™t pour une installation propre!"