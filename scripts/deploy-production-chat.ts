#!/usr/bin/env tsx

/**
 * Script de d√©ploiement en production pour le chat Gemini
 * V√©rifie la configuration, ex√©cute les tests et pr√©pare le d√©ploiement
 */

import { execSync } from 'child_process';
import { existsSync, writeFileSync, readFileSync } from 'fs';
import { resolve } from 'path';
import { EnvironmentValidator } from './validate-production-env';

interface DeploymentConfig {
  environment: 'production' | 'staging';
  skipTests: boolean;
  skipValidation: boolean;
  dryRun: boolean;
  verbose: boolean;
}

interface DeploymentResult {
  success: boolean;
  steps: Array<{
    name: string;
    status: 'success' | 'failed' | 'skipped';
    duration: number;
    error?: string;
  }>;
  totalDuration: number;
}

class ProductionDeployer {
  private config: DeploymentConfig;
  private startTime: number;
  private results: DeploymentResult;

  constructor(config: Partial<DeploymentConfig> = {}) {
    this.config = {
      environment: 'production',
      skipTests: false,
      skipValidation: false,
      dryRun: false,
      verbose: false,
      ...config
    };

    this.startTime = Date.now();
    this.results = {
      success: true,
      steps: [],
      totalDuration: 0
    };
  }

  /**
   * Ex√©cute le d√©ploiement complet
   */
  async deploy(): Promise<DeploymentResult> {
    console.log('üöÄ D√©marrage du d√©ploiement en production du chat Gemini');
    console.log(`üìÖ ${new Date().toISOString()}`);
    console.log(`üéØ Environnement: ${this.config.environment}`);
    console.log(`üîß Mode: ${this.config.dryRun ? 'DRY RUN' : 'R√âEL'}`);
    console.log('='.repeat(60));

    try {
      // √âtapes de d√©ploiement
      await this.step('Validation de l\'environnement', () => this.validateEnvironment());
      await this.step('V√©rification des d√©pendances', () => this.checkDependencies());
      await this.step('Ex√©cution des tests', () => this.runTests());
      await this.step('Build de production', () => this.buildProduction());
      await this.step('Validation du build', () => this.validateBuild());
      await this.step('Pr√©paration des assets', () => this.prepareAssets());
      await this.step('Configuration de s√©curit√©', () => this.setupSecurity());
      await this.step('D√©ploiement', () => this.deployToProduction());
      await this.step('Tests post-d√©ploiement', () => this.postDeploymentTests());
      await this.step('Nettoyage', () => this.cleanup());

      this.results.totalDuration = Date.now() - this.startTime;
      this.displayResults();

      return this.results;
    } catch (error) {
      console.error('üí• Erreur lors du d√©ploiement:', error);
      this.results.success = false;
      this.results.totalDuration = Date.now() - this.startTime;
      return this.results;
    }
  }

  /**
   * Ex√©cute une √©tape avec gestion d'erreurs et timing
   */
  private async step(name: string, fn: () => Promise<void> | void): Promise<void> {
    const stepStart = Date.now();
    console.log(`\nüîÑ ${name}...`);

    try {
      await fn();
      const duration = Date.now() - stepStart;
      this.results.steps.push({ name, status: 'success', duration });
      console.log(`‚úÖ ${name} - Termin√© en ${duration}ms`);
    } catch (error) {
      const duration = Date.now() - stepStart;
      const errorMessage = error instanceof Error ? error.message : String(error);
      this.results.steps.push({ name, status: 'failed', duration, error: errorMessage });
      console.error(`‚ùå ${name} - √âchec: ${errorMessage}`);
      
      if (!this.config.dryRun) {
        throw error;
      }
    }
  }

  /**
   * Valide l'environnement de production
   */
  private async validateEnvironment(): Promise<void> {
    if (this.config.skipValidation) {
      console.log('‚è≠Ô∏è  Validation ignor√©e (--skip-validation)');
      return;
    }

    const validator = new EnvironmentValidator();
    const results = validator.validate();

    if (!results.valid) {
      throw new Error(`Validation de l'environnement √©chou√©e: ${results.errors.length} erreurs`);
    }

    console.log(`‚úÖ Environnement valid√©: ${results.summary.valid}/${results.summary.total} variables OK`);
  }

  /**
   * V√©rifie les d√©pendances
   */
  private async checkDependencies(): Promise<void> {
    // V√©rifier Node.js version
    const nodeVersion = process.version;
    const requiredNodeVersion = '18.0.0';
    
    if (!this.isVersionCompatible(nodeVersion.slice(1), requiredNodeVersion)) {
      throw new Error(`Node.js ${requiredNodeVersion}+ requis, version actuelle: ${nodeVersion}`);
    }

    // V√©rifier les d√©pendances npm
    if (!existsSync('node_modules')) {
      console.log('üì¶ Installation des d√©pendances...');
      this.exec('npm ci');
    }

    // V√©rifier les d√©pendances critiques
    const criticalDeps = ['@google/genai', 'next', 'react'];
    for (const dep of criticalDeps) {
      try {
        require.resolve(dep);
        console.log(`‚úÖ ${dep} disponible`);
      } catch {
        throw new Error(`D√©pendance critique manquante: ${dep}`);
      }
    }
  }

  /**
   * Ex√©cute les tests
   */
  private async runTests(): Promise<void> {
    if (this.config.skipTests) {
      console.log('‚è≠Ô∏è  Tests ignor√©s (--skip-tests)');
      return;
    }

    // Tests unitaires
    console.log('üß™ Ex√©cution des tests unitaires...');
    this.exec('npm run test -- --run --reporter=verbose');

    // Tests d'int√©gration sp√©cifiques au chat
    console.log('üîó Tests d\'int√©gration du chat...');
    this.exec('npm run test:integration -- --grep="chat"');

    // Tests de s√©curit√©
    console.log('üîí Tests de s√©curit√©...');
    this.exec('npm audit --audit-level=high');
  }

  /**
   * Build de production
   */
  private async buildProduction(): Promise<void> {
    console.log('üèóÔ∏è  Build de production...');
    
    // Nettoyer les builds pr√©c√©dents
    this.exec('rm -rf .next');
    
    // Build Next.js
    this.exec('npm run build');
    
    // V√©rifier que le build existe
    if (!existsSync('.next')) {
      throw new Error('Build √©chou√©: dossier .next non cr√©√©');
    }

    console.log('‚úÖ Build de production termin√©');
  }

  /**
   * Valide le build de production
   */
  private async validateBuild(): Promise<void> {
    // V√©rifier la taille du build
    const buildSize = this.getBuildSize();
    const maxBuildSize = 50 * 1024 * 1024; // 50MB
    
    if (buildSize > maxBuildSize) {
      console.warn(`‚ö†Ô∏è  Build volumineux: ${(buildSize / 1024 / 1024).toFixed(2)}MB`);
    }

    // V√©rifier les routes critiques
    const criticalRoutes = [
      '.next/server/app/api/chat/gemini/route.js',
      '.next/server/app/page.js'
    ];

    for (const route of criticalRoutes) {
      if (!existsSync(route)) {
        throw new Error(`Route critique manquante: ${route}`);
      }
    }

    // Analyser le bundle
    console.log('üìä Analyse du bundle...');
    try {
      this.exec('npx @next/bundle-analyzer');
    } catch {
      console.warn('‚ö†Ô∏è  Analyse du bundle √©chou√©e (non critique)');
    }
  }

  /**
   * Pr√©pare les assets pour la production
   */
  private async prepareAssets(): Promise<void> {
    // Optimiser les images si n√©cessaire
    console.log('üñºÔ∏è  Optimisation des assets...');
    
    // G√©n√©rer le sitemap
    console.log('üó∫Ô∏è  G√©n√©ration du sitemap...');
    this.exec('npm run build:sitemap');
    
    // G√©n√©rer les manifests
    console.log('üì± G√©n√©ration des manifests...');
    this.generateManifests();
  }

  /**
   * Configure la s√©curit√© pour la production
   */
  private async setupSecurity(): Promise<void> {
    console.log('üîí Configuration de s√©curit√©...');
    
    // V√©rifier les headers de s√©curit√©
    this.validateSecurityHeaders();
    
    // Configurer CSP
    this.setupContentSecurityPolicy();
    
    // V√©rifier les certificats SSL (si applicable)
    await this.validateSSL();
  }

  /**
   * D√©ploie en production
   */
  private async deployToProduction(): Promise<void> {
    if (this.config.dryRun) {
      console.log('üîç DRY RUN: Simulation du d√©ploiement...');
      await new Promise(resolve => setTimeout(resolve, 2000));
      return;
    }

    console.log('üöÄ D√©ploiement en production...');
    
    // D√©ploiement Vercel (exemple)
    if (process.env.VERCEL_TOKEN) {
      this.exec('vercel --prod --confirm');
    } else {
      console.log('‚ö†Ô∏è  Token Vercel manquant, d√©ploiement manuel requis');
    }
  }

  /**
   * Tests post-d√©ploiement
   */
  private async postDeploymentTests(): Promise<void> {
    console.log('üß™ Tests post-d√©ploiement...');
    
    const baseUrl = process.env.NEXT_PUBLIC_BASE_URL;
    if (!baseUrl) {
      console.warn('‚ö†Ô∏è  BASE_URL manquante, tests post-d√©ploiement ignor√©s');
      return;
    }

    // Test de sant√© de l'API
    await this.testHealthEndpoint(`${baseUrl}/api/health`);
    
    // Test du chat Gemini
    await this.testChatEndpoint(`${baseUrl}/api/chat/gemini`);
    
    // Test des performances
    await this.testPerformance(baseUrl);
  }

  /**
   * Nettoyage post-d√©ploiement
   */
  private async cleanup(): Promise<void> {
    console.log('üßπ Nettoyage...');
    
    // Nettoyer les fichiers temporaires
    this.exec('rm -rf .next/cache/webpack');
    
    // Archiver les logs de d√©ploiement
    this.archiveDeploymentLogs();
  }

  // M√©thodes utilitaires

  private exec(command: string): string {
    if (this.config.verbose) {
      console.log(`$ ${command}`);
    }
    
    try {
      return execSync(command, { 
        encoding: 'utf8',
        stdio: this.config.verbose ? 'inherit' : 'pipe'
      });
    } catch (error: any) {
      throw new Error(`Commande √©chou√©e: ${command}\n${error.message}`);
    }
  }

  private isVersionCompatible(current: string, required: string): boolean {
    const currentParts = current.split('.').map(Number);
    const requiredParts = required.split('.').map(Number);
    
    for (let i = 0; i < Math.max(currentParts.length, requiredParts.length); i++) {
      const currentPart = currentParts[i] || 0;
      const requiredPart = requiredParts[i] || 0;
      
      if (currentPart > requiredPart) return true;
      if (currentPart < requiredPart) return false;
    }
    
    return true;
  }

  private getBuildSize(): number {
    try {
      const stats = execSync('du -sb .next', { encoding: 'utf8' });
      return parseInt(stats.split('\t')[0]);
    } catch {
      return 0;
    }
  }

  private generateManifests(): void {
    const manifest = {
      name: 'Laurent Serre D√©veloppement - Chat IA',
      short_name: 'LSD Chat',
      description: 'Assistant IA pour le d√©veloppement commercial',
      start_url: '/',
      display: 'standalone',
      background_color: '#F2F5F7',
      theme_color: '#00BDA4',
      icons: [
        {
          src: '/icon-192.png',
          sizes: '192x192',
          type: 'image/png'
        }
      ]
    };

    writeFileSync('public/manifest.json', JSON.stringify(manifest, null, 2));
  }

  private validateSecurityHeaders(): void {
    // V√©rifier que les headers de s√©curit√© sont configur√©s
    const nextConfig = resolve('next.config.js');
    if (existsSync(nextConfig)) {
      const config = readFileSync(nextConfig, 'utf8');
      if (!config.includes('X-Frame-Options')) {
        console.warn('‚ö†Ô∏è  Headers de s√©curit√© manquants dans next.config.js');
      }
    }
  }

  private setupContentSecurityPolicy(): void {
    console.log('üõ°Ô∏è  Configuration CSP...');
    // CSP configur√© dans production.ts
  }

  private async validateSSL(): Promise<void> {
    const baseUrl = process.env.NEXT_PUBLIC_BASE_URL;
    if (baseUrl && baseUrl.startsWith('https://')) {
      console.log('üîê Validation SSL...');
      // Validation SSL simplifi√©e
      try {
        const response = await fetch(baseUrl, { method: 'HEAD' });
        if (response.ok) {
          console.log('‚úÖ SSL valide');
        }
      } catch {
        console.warn('‚ö†Ô∏è  Validation SSL √©chou√©e');
      }
    }
  }

  private async testHealthEndpoint(url: string): Promise<void> {
    try {
      const response = await fetch(url);
      if (!response.ok) {
        throw new Error(`Health check failed: ${response.status}`);
      }
      console.log('‚úÖ Health endpoint OK');
    } catch (error) {
      console.warn(`‚ö†Ô∏è  Health endpoint test failed: ${error}`);
    }
  }

  private async testChatEndpoint(url: string): Promise<void> {
    try {
      const response = await fetch(url, { method: 'OPTIONS' });
      if (response.ok) {
        console.log('‚úÖ Chat endpoint accessible');
      }
    } catch (error) {
      console.warn(`‚ö†Ô∏è  Chat endpoint test failed: ${error}`);
    }
  }

  private async testPerformance(baseUrl: string): Promise<void> {
    console.log('‚ö° Test de performance...');
    // Test de performance simplifi√©
    const start = Date.now();
    try {
      await fetch(baseUrl);
      const duration = Date.now() - start;
      console.log(`‚úÖ Temps de r√©ponse: ${duration}ms`);
    } catch (error) {
      console.warn(`‚ö†Ô∏è  Test de performance √©chou√©: ${error}`);
    }
  }

  private archiveDeploymentLogs(): void {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const logFile = `deployment-${timestamp}.log`;
    
    const logContent = {
      timestamp: new Date().toISOString(),
      environment: this.config.environment,
      results: this.results,
      nodeVersion: process.version,
      npmVersion: this.exec('npm --version').trim()
    };

    writeFileSync(`logs/${logFile}`, JSON.stringify(logContent, null, 2));
    console.log(`üìù Logs archiv√©s: ${logFile}`);
  }

  private displayResults(): void {
    console.log('\n' + '='.repeat(60));
    console.log('üìä R√âSULTATS DU D√âPLOIEMENT');
    console.log('='.repeat(60));
    
    console.log(`üéØ Environnement: ${this.config.environment}`);
    console.log(`‚è±Ô∏è  Dur√©e totale: ${this.results.totalDuration}ms`);
    console.log(`üìà √âtapes: ${this.results.steps.length}`);
    
    const successful = this.results.steps.filter(s => s.status === 'success').length;
    const failed = this.results.steps.filter(s => s.status === 'failed').length;
    
    console.log(`‚úÖ R√©ussies: ${successful}`);
    console.log(`‚ùå √âchou√©es: ${failed}`);
    
    if (failed > 0) {
      console.log('\nüö® √âTAPES √âCHOU√âES:');
      this.results.steps
        .filter(s => s.status === 'failed')
        .forEach(step => {
          console.log(`- ${step.name}: ${step.error}`);
        });
    }
    
    console.log('\n' + '='.repeat(60));
    
    if (this.results.success) {
      console.log('üéâ D√âPLOIEMENT R√âUSSI!');
      console.log('üåê L\'application est maintenant disponible en production');
    } else {
      console.log('üí• D√âPLOIEMENT √âCHOU√â!');
      console.log('üîß Corrigez les erreurs et relancez le d√©ploiement');
    }
    
    console.log('='.repeat(60));
  }
}

// CLI
async function main() {
  const args = process.argv.slice(2);
  
  const config: Partial<DeploymentConfig> = {
    environment: args.includes('--staging') ? 'staging' : 'production',
    skipTests: args.includes('--skip-tests'),
    skipValidation: args.includes('--skip-validation'),
    dryRun: args.includes('--dry-run'),
    verbose: args.includes('--verbose')
  };

  if (args.includes('--help')) {
    console.log(`
Usage: npm run deploy:production [options]

Options:
  --staging           D√©ployer en staging au lieu de production
  --skip-tests        Ignorer les tests
  --skip-validation   Ignorer la validation d'environnement
  --dry-run           Simulation sans d√©ploiement r√©el
  --verbose           Mode verbeux
  --help              Afficher cette aide
    `);
    process.exit(0);
  }

  const deployer = new ProductionDeployer(config);
  const results = await deployer.deploy();
  
  process.exit(results.success ? 0 : 1);
}

if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error);
}

export { ProductionDeployer };
export type { DeploymentConfig, DeploymentResult };