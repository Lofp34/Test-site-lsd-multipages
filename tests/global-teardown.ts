/**
 * Nettoyage global apr√®s l'ex√©cution des tests Playwright
 * G√©n√®re les rapports finaux et nettoie les ressources
 */

import { FullConfig } from '@playwright/test';
import { writeFileSync, existsSync, mkdirSync } from 'fs';
import { join } from 'path';

async function globalTeardown(config: FullConfig) {
  console.log('üßπ Nettoyage global apr√®s les tests de validation...');
  
  try {
    // Cr√©er le dossier de rapports s'il n'existe pas
    const reportsDir = 'reports';
    if (!existsSync(reportsDir)) {
      mkdirSync(reportsDir, { recursive: true });
    }
    
    // G√©n√©rer un r√©sum√© des tests
    const summary = {
      timestamp: new Date().toISOString(),
      config: {
        baseURL: config.projects[0].use.baseURL,
        browsers: config.projects.map(p => p.name),
        workers: config.workers,
        retries: config.retries,
      },
      environment: {
        nodeVersion: process.version,
        platform: process.platform,
        ci: !!process.env.CI,
      },
      testFiles: [
        'user-journey-validation.ts',
        // Autres fichiers de test...
      ]
    };
    
    const summaryFile = join(reportsDir, `test-summary-${Date.now()}.json`);
    writeFileSync(summaryFile, JSON.stringify(summary, null, 2));
    
    console.log(`üìä R√©sum√© des tests sauvegard√©: ${summaryFile}`);
    
    // Nettoyer les fichiers temporaires si n√©cessaire
    // (screenshots, vid√©os, traces seront conserv√©s pour analyse)
    
    console.log('‚úÖ Nettoyage global termin√©');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du nettoyage global:', error);
    // Ne pas faire √©chouer les tests √† cause du nettoyage
  }
}

export default globalTeardown;